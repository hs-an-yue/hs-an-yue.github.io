<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Centos安装Docker容器以及Dockerhub不能访问的解决方案</title>
    <url>/2025/04/25/Centos%E4%B8%8A%E5%AE%89%E8%A3%85Docker%E5%AE%B9%E5%99%A8%E4%BB%A5%E5%8F%8ADockerhub%E4%B8%8D%E8%83%BD%E8%AE%BF%E9%97%AE%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line"><span class="attribute">作者</span><span class="punctuation">:</span> <span class="string">夜泊1990</span></span><br><span class="line"><span class="attribute">企鹅</span><span class="punctuation">:</span> <span class="string">1611756908</span></span><br><span class="line"><span class="attribute">Q 群</span><span class="punctuation">:</span> <span class="string">948233848</span></span><br><span class="line"><span class="attribute">邮箱</span><span class="punctuation">:</span> <span class="string">hd1611756908@163.com</span></span><br><span class="line"><span class="attribute">博客</span><span class="punctuation">:</span> <span class="string">https://hs-an-yue.github.io/</span></span><br><span class="line"><span class="attribute">B 站</span><span class="punctuation">:</span> <span class="string">https://space.bilibili.com/514155929/</span></span><br></pre></td></tr></table></figure>

<hr>
<span id="more"></span>

<h2 id="第一章-Docker介绍"><a href="#第一章-Docker介绍" class="headerlink" title="第一章 Docker介绍"></a>第一章 Docker介绍</h2><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">Docker 是一个开源的应用容器引擎</span><br><span class="line">Docker 将应用程序与该程序的依赖,打包在一个文件里面。运行这个文件,就会生成一个虚拟容器.程序在这个虚拟容器里运行,就好像在真实的物理机上运行一样,并且开销很低.</span><br></pre></td></tr></table></figure>

<h2 id="第二章-Docker安装"><a href="#第二章-Docker安装" class="headerlink" title="第二章 Docker安装"></a>第二章 Docker安装</h2><figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line"><span class="attribute">这里演示在Centos7.x上安装Docker</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">第一步</span><span class="punctuation">:</span> <span class="string">Linux内核升级,Linux内核版本需要大于3.10版本</span></span><br><span class="line">	<span class="attribute">命令</span><span class="punctuation">: </span></span><br><span class="line">		<span class="attribute">1. 查看内核     uname -r</span></span><br><span class="line"><span class="attribute">		2. 内核升级     yum install -y kernel</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">第二步</span><span class="punctuation">:</span> <span class="string">安装 gcc和gcc-c++编译器,如果本机中存在可以不装</span></span><br><span class="line">	<span class="attribute">命令</span><span class="punctuation">:</span></span><br><span class="line">		<span class="attribute">1. 安装gcc      yum -y install gcc</span></span><br><span class="line"><span class="attribute">		2. 安装gcc-c++  yum -y install gcc-c++</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">第三步</span><span class="punctuation">:</span> <span class="string">卸载旧版本的docker</span></span><br><span class="line">	<span class="attribute">命令</span><span class="punctuation">:</span></span><br><span class="line">		<span class="attribute">yum remove docker \</span></span><br><span class="line"><span class="attribute">                  docker-client \</span></span><br><span class="line"><span class="attribute">                  docker-client-latest \</span></span><br><span class="line"><span class="attribute">                  docker-common \</span></span><br><span class="line"><span class="attribute">                  docker-latest \</span></span><br><span class="line"><span class="attribute">                  docker-latest-logrotate \</span></span><br><span class="line"><span class="attribute">                  docker-logrotate \</span></span><br><span class="line"><span class="attribute">                  docker-engine</span></span><br><span class="line"><span class="attribute"> </span></span><br><span class="line"><span class="attribute">第四步</span><span class="punctuation">:</span> <span class="string">安装相关依赖包</span></span><br><span class="line">	<span class="attribute">命令</span><span class="punctuation">:</span></span><br><span class="line">		<span class="attribute">yum install -y yum-utils device-mapper-persistent-data lvm2</span></span><br><span class="line"><span class="attribute">		</span></span><br><span class="line"><span class="attribute">第五步</span><span class="punctuation">:</span> <span class="string">设置stable镜像仓库(阿里云镜像仓库)</span></span><br><span class="line">	<span class="attribute">命令</span><span class="punctuation">:</span></span><br><span class="line">		yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="attribute">第六步</span><span class="punctuation">:</span> <span class="string">更新yum软件包索引</span></span><br><span class="line">	<span class="attribute">命令</span><span class="punctuation">:</span></span><br><span class="line">		<span class="attribute">yum makecache fast</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">第七步</span><span class="punctuation">:</span> <span class="string">搜索当前的Docker版本,版本由高到低排列</span></span><br><span class="line">	<span class="attribute">命令</span><span class="punctuation">:</span></span><br><span class="line">		yum list docker-ce.x86_64  --showduplicates | sort -r</span><br><span class="line">	</span><br><span class="line">	搜索结果展示(部分)</span><br><span class="line">            docker-ce.x86_64            3:26.1.4-1.el7                      docker-ce-stable</span><br><span class="line">            docker-ce.x86_64            3:26.1.3-1.el7                      docker-ce-stable</span><br><span class="line">            docker-ce.x86_64            3:26.1.2-1.el7                      docker-ce-stable</span><br><span class="line">            docker-ce.x86_64            3:26.1.1-1.el7                      docker-ce-stable</span><br><span class="line">            docker-ce.x86_64            3:26.1.0-1.el7                      docker-ce-stable</span><br><span class="line">            docker-ce.x86_64            3:26.0.2-1.el7                      docker-ce-stable</span><br><span class="line">            docker-ce.x86_64            3:26.0.1-1.el7                      docker-ce-stable</span><br><span class="line"></span><br><span class="line"><span class="attribute">第八步</span><span class="punctuation">:</span> <span class="string">安装指定版本的Docker</span></span><br><span class="line">	<span class="attribute">命令格式</span><span class="punctuation">: </span></span><br><span class="line">		<span class="attribute">yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</span></span><br><span class="line"><span class="attribute">		</span></span><br><span class="line"><span class="attribute">		VERSION_STRING</span><span class="punctuation">:</span> <span class="string">版本查看上面的搜索结果</span></span><br><span class="line">		版本号截取方式在第二列中从冒号(:)开始,短横线(-)结束中间的那段为版本(例如 3:20.10.2-3.el7 的版本为 20.10.2)替换&lt;VERSION_STRING&gt;即可</span><br><span class="line">		</span><br><span class="line">	<span class="attribute">安装Docker26.1.4版本命令如下</span><span class="punctuation">:</span></span><br><span class="line">    	<span class="attribute">yum install docker-ce-26.1.4 docker-ce-cli-26.1.4</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">第九步</span><span class="punctuation">:</span> <span class="string">安装完成启动</span></span><br><span class="line">	<span class="attribute">命令</span><span class="punctuation">: </span></span><br><span class="line">		<span class="attribute">1. 启动Docker    		   systemctl start docker</span></span><br><span class="line"><span class="attribute">		2. 查看Docker是否正常运行  ps -ef | grep docker</span></span><br><span class="line"><span class="attribute">		</span></span><br><span class="line"><span class="attribute">第十步</span><span class="punctuation">:</span> <span class="string">测试是否安装成功(运行hello-world镜像测试)</span></span><br><span class="line">	<span class="attribute">命令</span><span class="punctuation">:</span> <span class="string">docker run hello-world</span></span><br><span class="line">	</span><br><span class="line">	<span class="attribute">报错信息</span><span class="punctuation">:</span></span><br><span class="line">	[root@192 ~]# docker run hello-world</span><br><span class="line">        Unable to find image &#x27;hello-world:latest&#x27; locally</span><br><span class="line">        <span class="attribute">latest</span><span class="punctuation">:</span> <span class="string">Pulling from library/hello-world</span></span><br><span class="line">        <span class="attribute">c1ec31eb5944</span><span class="punctuation">:</span> <span class="string">Retrying in 1 second </span></span><br><span class="line">        <span class="attribute">docker</span><span class="punctuation">:</span> <span class="string">error pulling image configuration: download failed after attempts=6: dial tcp 128.242.240.85:443: connect: connection refused.</span></span><br><span class="line">        <span class="attribute">See &#x27;docker run --help&#x27;.</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">	报错原因</span><span class="punctuation">:</span> <span class="string">因为 DockerHub 不能在国内使用,所以运行hello-world时,不能从DockerHub上下载镜像,所以失败</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">第十一步</span><span class="punctuation">:</span> <span class="string">解决 DockerHub 镜像站不能访问的问题</span></span><br><span class="line"></span><br><span class="line">	<span class="attribute">解决方案</span><span class="punctuation">:</span> <span class="string">国内有能够替代DockerHub的镜像站</span></span><br><span class="line">		<span class="attribute">例如</span><span class="punctuation">:</span> <span class="string">百度镜像站,南京大学镜像站等,可以替换默认的DockerHub镜像站</span></span><br><span class="line">			<span class="attribute">1. 百度镜像地址</span><span class="punctuation">:</span> <span class="string">    https://mirror.baidubce.com</span></span><br><span class="line">			<span class="attribute">2. 南京大学镜像地址</span><span class="punctuation">:</span> <span class="string"> https://docker.nju.edu.cn</span></span><br><span class="line">			</span><br><span class="line">	<span class="attribute">替换方式</span><span class="punctuation">:</span></span><br><span class="line">		<span class="attribute">第1步</span><span class="punctuation">:</span> <span class="string">进入 cd /etc/docker/ 目录下查看是否有daemon.json文件,如果没有就自己手动创建一个</span></span><br><span class="line">		<span class="attribute">第2步</span><span class="punctuation">:</span> <span class="string">如果存在daemon.json文件将下面的信息保存到daemon.json中</span></span><br><span class="line">        <span class="attribute">&#123;</span></span><br><span class="line"><span class="attribute">            &quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="string">[</span></span><br><span class="line">				&quot;https://dockerhub.timeweb.cloud&quot;,</span><br><span class="line">				&quot;https://docker.m.daocloud.io&quot;,</span><br><span class="line">				&quot;https://noohub.ru&quot;,</span><br><span class="line">				&quot;https://docker.agsv.top&quot;,</span><br><span class="line">				&quot;https://hub.iyuu.cn&quot;,</span><br><span class="line">				&quot;https://docker.shootchat.top&quot;,</span><br><span class="line">				&quot;https://do.nark.eu.org&quot;,</span><br><span class="line">				&quot;https://docker.m.daocloud.io&quot;</span><br><span class="line">            <span class="attribute">]</span></span><br><span class="line"><span class="attribute">        &#125;</span></span><br><span class="line"><span class="attribute">        第3步</span><span class="punctuation">:</span> <span class="string">重启docker 命令: systemctl restart docker</span></span><br><span class="line">        </span><br><span class="line">        <span class="attribute">第4步</span><span class="punctuation">:</span> <span class="string">重启后继续执行 docker run hello-world 命令测试镜像地址是否成功</span></span><br><span class="line">        </span><br><span class="line">        	如果出现以下日志表示成功</span><br><span class="line">        </span><br><span class="line">        	[root@192 ~]# docker run hello-world</span><br><span class="line">                Unable to find image &#x27;hello-world:latest&#x27; locally</span><br><span class="line">                <span class="attribute">latest</span><span class="punctuation">:</span> <span class="string">Pulling from library/hello-world</span></span><br><span class="line">                <span class="attribute">c1ec31eb5944</span><span class="punctuation">:</span> <span class="string">Pull complete </span></span><br><span class="line">                <span class="attribute">Digest</span><span class="punctuation">:</span> <span class="string">sha256:1408fec50309afee38f3535383f5b09419e6dc0925bc69891e79d84cc4cdcec6</span></span><br><span class="line">                <span class="attribute">Status</span><span class="punctuation">:</span> <span class="string">Downloaded newer image for hello-world:latest</span></span><br><span class="line"></span><br><span class="line">                <span class="attribute">Hello from Docker!</span></span><br><span class="line"><span class="attribute">                This message shows that your installation appears to be working correctly.</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">                To generate this message, Docker took the following steps</span><span class="punctuation">:</span></span><br><span class="line">                <span class="attribute">1. The Docker client contacted the Docker daemon.</span></span><br><span class="line"><span class="attribute">                2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.</span></span><br><span class="line"><span class="attribute">                (amd64)</span></span><br><span class="line"><span class="attribute">                3. The Docker daemon created a new container from that image which runs the</span></span><br><span class="line"><span class="attribute">                executable that produces the output you are currently reading.</span></span><br><span class="line"><span class="attribute">                4. The Docker daemon streamed that output to the Docker client, which sent it</span></span><br><span class="line"><span class="attribute">                to your terminal.</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">                To try something more ambitious, you can run an Ubuntu container with</span><span class="punctuation">:</span></span><br><span class="line">                <span class="attribute">$ docker run -it ubuntu bash</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">                Share images, automate workflows, and more with a free Docker ID</span><span class="punctuation">:</span></span><br><span class="line">                https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">                <span class="attribute">For more examples and ideas, visit</span><span class="punctuation">:</span></span><br><span class="line">                https://docs.docker.com/get-started/</span><br><span class="line"> </span><br><span class="line"><span class="attribute">第十一步</span><span class="punctuation">:</span> <span class="string">设置Docker开机启动</span></span><br><span class="line">	<span class="attribute">命令</span><span class="punctuation">:</span> <span class="string">systemctl enable docker</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Linux(运维)</category>
      </categories>
      <tags>
        <tag>Centos</tag>
        <tag>Linux</tag>
        <tag>Docker</tag>
        <tag>镜像</tag>
        <tag>Dockerhub</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos操作系统不维护的解决方案</title>
    <url>/2025/04/25/Centos%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%8D%E7%BB%B4%E6%8A%A4%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line"><span class="attribute">作者</span><span class="punctuation">:</span> <span class="string">夜泊1990</span></span><br><span class="line"><span class="attribute">企鹅</span><span class="punctuation">:</span> <span class="string">1611756908</span></span><br><span class="line"><span class="attribute">Q 群</span><span class="punctuation">:</span> <span class="string">948233848</span></span><br><span class="line"><span class="attribute">邮箱</span><span class="punctuation">:</span> <span class="string">hd1611756908@163.com</span></span><br><span class="line"><span class="attribute">博客</span><span class="punctuation">:</span> <span class="string">https://hs-an-yue.github.io/</span></span><br><span class="line"><span class="attribute">B 站</span><span class="punctuation">:</span> <span class="string">https://space.bilibili.com/514155929/</span></span><br></pre></td></tr></table></figure>

<hr>
<span id="more"></span>

<h2 id="第一章-Centos介绍"><a href="#第一章-Centos介绍" class="headerlink" title="第一章 Centos介绍"></a>第一章 Centos介绍</h2><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">1</span>. CentOS 是Linux发行版之一，是免费的、开源的、可以重新分发的开源操作系统</span><br><span class="line"><span class="attribute">2</span>. 目前最新版为 Centos8.x 国内市场使用最多的为Centos7.x和Centos6.x </span><br><span class="line"><span class="attribute">3</span>. CentOS7在<span class="number">2024</span>年<span class="number">6</span>月<span class="number">30</span>日停止维护,仓库基本不能在使用,很多命令也不能在使用</span><br></pre></td></tr></table></figure>

<h2 id="第二章-Centos官方不维护解决方案"><a href="#第二章-Centos官方不维护解决方案" class="headerlink" title="第二章 Centos官方不维护解决方案"></a>第二章 Centos官方不维护解决方案</h2><figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line"><span class="attribute">首先就是yum库的问题,由于Centos系统不在维护,yum命令不能使用,所以需要切换yum命令的源</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">使用一个安装命令测试yum库是否可用</span></span><br><span class="line"><span class="attribute">yum install -y vim     安装vim编辑器命令结果报错如下</span><span class="punctuation">:</span> <span class="string">找不到对应的地址,由于Centos不在维护整个yum源都停止使用了</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">官方yum源不能使用,怎么替换官方yum源呢?步骤如下</span><span class="punctuation">:</span></span><br></pre></td></tr></table></figure>

<img src="https://note.youdao.com/yws/api/personal/file/WEB806dd0f8a4871f1c230a131dd72bfbe0?method=download&shareKey=49d7fda391f079da526558ca3a1cbd02">

<h3 id="第1步-查看默认仓库的位置"><a href="#第1步-查看默认仓库的位置" class="headerlink" title="第1步 查看默认仓库的位置"></a>第1步 查看默认仓库的位置</h3><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line">默认仓库的地址: /etc/yum.repos.d  里面有一个 CentOS-<span class="keyword">Base</span>.repo 文件就是默认仓库文件 </span><br></pre></td></tr></table></figure>



<img src="https://note.youdao.com/yws/api/personal/file/WEB600bf0a41841ac20a1096e0f8ab0e5a7?method=download&shareKey=c12bca14c2186da0a4b8532507166aca">

 

<h3 id="第2步-默认仓库备份"><a href="#第2步-默认仓库备份" class="headerlink" title="第2步 默认仓库备份"></a>第2步 默认仓库备份</h3><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line">使用mv命令将原仓库 CentOS-<span class="keyword">Base</span>.repo 备份,防止后面操作失败会滚不回去.</span><br><span class="line"></span><br><span class="line">命令: mv /etc/yum.repos.d/CentOS-<span class="keyword">Base</span>.repo /etc/yum.repos.d/CentOS-<span class="keyword">Base</span>.repo.bak</span><br></pre></td></tr></table></figure>



<img src="https://note.youdao.com/yws/api/personal/file/WEB503ec65799d36459b9aac0a30f24c8c5?method=download&shareKey=2c79b13b51ff7c554c2e38be99f831f8">

<h3 id="第3步-下载阿里云仓库"><a href="#第3步-下载阿里云仓库" class="headerlink" title="第3步 下载阿里云仓库"></a>第3步 下载阿里云仓库</h3><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line">下载阿里云镜像仓库命令如下: Centos7系统</span><br><span class="line">命令: curl -o /etc/yum.repos.d/CentOS-<span class="keyword">Base</span>.repo http://mirrors.aliyun.<span class="keyword">com</span>/repo/Centos-<span class="number">7</span>.repo</span><br></pre></td></tr></table></figure>

<img src="https://note.youdao.com/yws/api/personal/file/WEBb13eb5bb05bc027a08353b9ab2498808?method=download&shareKey=aa50284b5a821dd1909ce43d52f883de">

<h3 id="第4步-清除缓存-生成缓存"><a href="#第4步-清除缓存-生成缓存" class="headerlink" title="第4步 清除缓存&amp;生成缓存"></a>第4步 清除缓存&amp;生成缓存</h3><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">yum clean <span class="keyword">all</span></span><br><span class="line">yum makecache</span><br><span class="line"></span><br><span class="line">通过以上步骤,将原有的默认源配置成了阿里云的国内源. 通过一个安装命令测试一下源是否成功</span><br><span class="line"></span><br><span class="line">安装<span class="keyword">vim</span>编辑器</span><br><span class="line">命令为: yum install <span class="keyword">vim</span></span><br><span class="line">如果安装成功说明阿里云镜像源配置成功</span><br></pre></td></tr></table></figure>

<h2 id="第三章-替代产品"><a href="#第三章-替代产品" class="headerlink" title="第三章 替代产品"></a>第三章 替代产品</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">由于Centos的停止更新，很多习惯使用Centos的用户来说特别的不方便,可以寻找一个替代Centos的Linux的发行版 AlmaLinux(阿尔玛),基本上继承了Centos的全部特性,使用上和Centos基本相同,可以作为Centos的替代产品,开源免费的社区版.具体可以自己去查询资料这里了不做详细介绍</span><br><span class="line"></span><br><span class="line">如果还是喜欢使用Centos系统,也可以像上面那样,做一个源修改,还是可以使用的.</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux(运维)</category>
      </categories>
      <tags>
        <tag>Centos</tag>
        <tag>Linux</tag>
        <tag>AlmaLinux</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker的常用命令以及使用</title>
    <url>/2025/04/25/Docker%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line"><span class="attribute">作者</span><span class="punctuation">:</span> <span class="string">夜泊1990</span></span><br><span class="line"><span class="attribute">企鹅</span><span class="punctuation">:</span> <span class="string">1611756908</span></span><br><span class="line"><span class="attribute">Q 群</span><span class="punctuation">:</span> <span class="string">948233848</span></span><br><span class="line"><span class="attribute">邮箱</span><span class="punctuation">:</span> <span class="string">hd1611756908@163.com</span></span><br><span class="line"><span class="attribute">博客</span><span class="punctuation">:</span> <span class="string">https://hs-an-yue.github.io/</span></span><br><span class="line"><span class="attribute">B 站</span><span class="punctuation">:</span> <span class="string">https://space.bilibili.com/514155929/</span></span><br></pre></td></tr></table></figure>

<hr>
<span id="more"></span>

<h2 id="第一章-Docker的基本操作命令"><a href="#第一章-Docker的基本操作命令" class="headerlink" title="第一章 Docker的基本操作命令"></a>第一章 Docker的基本操作命令</h2><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 查看Docker版本</span><br><span class="line">	-&gt; docker version</span><br><span class="line"><span class="number">2</span>. 搜索镜像(例如 搜索一个centos镜像)</span><br><span class="line">	-&gt; docker search centos</span><br><span class="line"><span class="number">3</span>. 拉取镜像(例如拉取centos镜像,将其下载到本地)</span><br><span class="line">	-&gt; docker pull centos</span><br><span class="line"><span class="number">4</span>. 列出当前Docker平台本地镜像</span><br><span class="line">	-&gt; docker images</span><br><span class="line">	</span><br><span class="line">	以下为本机展示的镜像列表</span><br><span class="line">	REPOSITORY    TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">    centos        latest    <span class="number">300e315</span>adb2f   <span class="number">4</span> weeks ago     <span class="number">209</span>MB</span><br><span class="line">    hello-world   latest    bf756fb1ae65   <span class="number">12</span> months ago   <span class="number">13.3</span>kB</span><br><span class="line">	</span><br><span class="line">	--&gt; REPOSITORY: 镜像仓库源</span><br><span class="line">	--&gt; TAG: 镜像的标签</span><br><span class="line">	--&gt; IMAGE ID: 镜像ID</span><br><span class="line">	--&gt; CREATED: 镜像创建时间</span><br><span class="line">	--&gt; SIZE: 镜像大小</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>. 删除镜像</span><br><span class="line">	-&gt; docker rmi [镜像名称/镜像ID]</span><br><span class="line">		--&gt; 参数 -f 强制删除  docker rmi -f [镜像名称/镜像ID]</span><br><span class="line">		--&gt; 注意: 在删除镜像的时候最好先将容器(下面介绍)删除,否则可能删除失败</span><br><span class="line"><span class="number">6</span>. 运行镜像</span><br><span class="line">	--&gt; docker <span class="keyword">run</span> [参数][镜像ID/镜像名称]</span><br><span class="line">		--&gt; 启动一个centos容器并且后台运行: docker <span class="keyword">run</span> -itd --<span class="keyword">name</span>=<span class="string">&quot;c01&quot;</span> centos /bin/bash</span><br><span class="line">			--&gt; -d 参数: 后台运行</span><br><span class="line">			--&gt; -i 参数: 以交互模式运行</span><br><span class="line">			--&gt; -t 参数: 为容器分配一个伪终端,常与-i参数一起搭配使用</span><br><span class="line">			--&gt; /bin/bash 参数: docker运行一个容器之后,必须保持这个容器里面的任意一个进程运行,否则容器就会在启动之后被杀死,/bin/bash就表示启动容器后启动bash</span><br><span class="line">			--&gt; -p 参数: 映射端口号,将容器内的应用的端口号映射到宿主机的端口号</span><br><span class="line">			--&gt; --<span class="keyword">name</span> 参数: 自定义容器名称</span><br><span class="line"></span><br><span class="line"><span class="number">7</span>. 查看容器</span><br><span class="line">	--&gt; 查看当前正在运行的容器: docker ps </span><br><span class="line">		--&gt; -a 参数: 查看当前所有的容器(已运行和未运行) docker ps -a</span><br><span class="line">		</span><br><span class="line">		CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS          PORTS     NAMES</span><br><span class="line">        b0faa3079666   centos    <span class="string">&quot;/bin/bash&quot;</span>   <span class="number">16</span> minutes ago   Up <span class="number">16</span> minutes             confident_cannon</span><br><span class="line">        <span class="number">94</span>eb3d8db458   centos    <span class="string">&quot;/bin/bash&quot;</span>   <span class="number">17</span> minutes ago   Up <span class="number">17</span> minutes             gallant_blackwell</span><br><span class="line">        <span class="number">5</span>db82b03c4e5   centos    <span class="string">&quot;/bin/bash&quot;</span>   <span class="number">17</span> minutes ago   Up <span class="number">17</span> minutes             festive_knuth</span><br><span class="line">		</span><br><span class="line">		--&gt; CONTAINER ID:容器ID</span><br><span class="line">		--&gt; IMAGE: 镜像</span><br><span class="line">		--&gt; COMMAND: 启动容器时运行的命令</span><br><span class="line">		--&gt; CREATED: 容器的创建时间</span><br><span class="line">		--&gt; STATUS: 容器的运行状态</span><br><span class="line">		--&gt; PORTS: 容器运行映射的端口号</span><br><span class="line">		--&gt; NAMES: 容器的名称(如果不设置会自动分配)</span><br><span class="line">	</span><br><span class="line"><span class="number">8</span>. 进入已运行的容(容器必须开启交互模式)</span><br><span class="line">	--&gt; 方式一: docker attach [容器ID]</span><br><span class="line">	--&gt; 方式二: docker exec -it [容器ID] /bin/bash</span><br><span class="line"><span class="number">9</span>. 从已经进入的容器中退出到宿主机</span><br><span class="line">	--&gt; 方式一 exit : 退出后容器被停止</span><br><span class="line">	--&gt; 方式二 Ctrl+d : 退出后容器被停止</span><br><span class="line">	--&gt; 方式三 Ctrl+p 和 Ctrl+q : 先按Ctrl+p在按Ctrl+q,退出后容器不会停止</span><br><span class="line"><span class="number">10</span>. 启动容器/停止/重启</span><br><span class="line">	--&gt; 启动容器: docker start [容器ID]</span><br><span class="line">	--&gt; 重启容器: docker restart [容器ID]</span><br><span class="line">	--&gt; 停止容器: docker <span class="keyword">stop</span> [容器ID]</span><br><span class="line">	--&gt; 停止全部容器: docker <span class="keyword">stop</span> $(docker ps -q)</span><br><span class="line"><span class="number">11</span>. 删除容器</span><br><span class="line">	--&gt; docker rm [容器ID/容器名称]  删除单个已经停止的容器</span><br><span class="line">	--&gt; docker rm $(docker ps -aq) 删除全部已停止的容器</span><br></pre></td></tr></table></figure>

<h2 id="第二章-Docker-运行命令的详细介绍"><a href="#第二章-Docker-运行命令的详细介绍" class="headerlink" title="第二章 Docker 运行命令的详细介绍"></a>第二章 Docker 运行命令的详细介绍</h2><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line">Docker运行(<span class="keyword">run</span>)命令的详细介绍,使用tomcat镜像作为例子演示</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. 拉取tomcat镜像</span><br><span class="line">	--&gt; git pull tomcat</span><br><span class="line"><span class="number">2</span>. 运行tomcat(在运行之后首先将宿主机的防火墙关闭,或者是开启<span class="number">8080</span>端口)</span><br><span class="line">	--&gt; docker <span class="keyword">run</span> -p[主机端口号]:[容器端口号] -v [主机目录]:[容器目录] tomcat</span><br><span class="line">	</span><br><span class="line">		eg: docker <span class="keyword">run</span> --<span class="keyword">name</span>=<span class="string">&quot;tomcat001&quot;</span> -d -p <span class="number">8080</span>:<span class="number">8080</span> -v /home/hs/web:/<span class="keyword">usr</span>/local/tomcat/webapps/ tomcat</span><br><span class="line">			</span><br><span class="line">			--<span class="keyword">name</span>: 给运行的容器起一个名字</span><br><span class="line">			-d    : 后台运行</span><br><span class="line">			-p    : 将宿主机的端口号和容器的端口号想关联</span><br><span class="line">			-v    : 挂载卷,将容器内的某一个目录挂载到宿主机的某一个目录上,可以实现容器和宿主机的数据共享</span><br><span class="line">				-- v mydata:/<span class="keyword">data</span>    冒号左侧是宿主机地址,冒号右侧是容器内地址</span><br><span class="line">				</span><br><span class="line">				上面的例子-v的意思就是将宿主机/home/hs/web目录的文件共享到容器内部的/<span class="keyword">usr</span>/local/tomcat/webapps/目录下</span><br><span class="line">				比如在/home/hs/web目录下放一个war包项目,就会共享到/<span class="keyword">usr</span>/local/tomcat/webapps/目录下</span><br></pre></td></tr></table></figure>

<h2 id="第三章-Docker自定义构建镜像"><a href="#第三章-Docker自定义构建镜像" class="headerlink" title="第三章 Docker自定义构建镜像"></a>第三章 Docker自定义构建镜像</h2><h3 id="第1节-自定义构建镜像的意义"><a href="#第1节-自定义构建镜像的意义" class="headerlink" title="第1节 自定义构建镜像的意义"></a>第1节 自定义构建镜像的意义</h3><figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 为什么要自己构建镜像文件</span><br><span class="line">	-&gt; 因为有的时候我们需要的镜像官方不一定有,或者我们需要的镜像功能比较多,官方提供的镜像功能不完善...</span><br><span class="line"><span class="number">2.</span> 怎么自定义一个镜像文件</span><br><span class="line">	-&gt; Docker提供了Dockerfile方式进行镜像的构建</span><br></pre></td></tr></table></figure>

<h3 id="第2节-Dockerfile-是什么"><a href="#第2节-Dockerfile-是什么" class="headerlink" title="第2节 Dockerfile 是什么"></a>第2节 Dockerfile 是什么</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明</span><br><span class="line"></span><br><span class="line">使用Dockerfile可以定制化构建属于自己的镜像文件</span><br></pre></td></tr></table></figure>

<h3 id="第3节-Dockerfile的使用"><a href="#第3节-Dockerfile的使用" class="headerlink" title="第3节 Dockerfile的使用"></a>第3节 Dockerfile的使用</h3><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">使用docker build命令通过Dockerfile构建镜像,构建可以通过本地路径(PATH)或者是网络路径(URL)构建,本地路径是一个本地文件系统,网络路径是一个GIT仓库地址</span><br><span class="line"></span><br><span class="line">~<span class="symbol">$</span> docker build .  <span class="comment">//传统方式</span></span><br><span class="line">~<span class="symbol">$</span> docker build -f /path/to/a/Dockerfile . <span class="comment">//采用-f参数指定构建哪一个Dockerfile文件</span></span><br><span class="line">~<span class="symbol">$</span> docker build -t fqyb/myapp .   <span class="comment">//构建完成之后指定一个仓库和标签 -t参数设置新镜像的仓库和标签</span></span><br><span class="line">~<span class="symbol">$</span> docker build -t fqyb/myapp:<span class="number">1.0</span><span class="number">.0</span> -t fqyb/myapp:latest .  <span class="comment">//如果构建完成之后添加到多个仓库可以添加多个-t参数</span></span><br></pre></td></tr></table></figure>

<h4 id="3-1-Dockerfile常用命令"><a href="#3-1-Dockerfile常用命令" class="headerlink" title="3.1 Dockerfile常用命令"></a>3.1 Dockerfile常用命令</h4><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span> 命令</span><br><span class="line"></span><br><span class="line">	语法: <span class="keyword">RUN</span> &lt;command&gt; 或者 <span class="keyword">RUN</span> [<span class="string">&quot;executable&quot;</span>, <span class="string">&quot;param1&quot;</span>, <span class="string">&quot;param2&quot;</span>]</span><br><span class="line"></span><br><span class="line">    执行一个<span class="keyword">shell</span>脚本</span><br><span class="line"></span><br><span class="line">    eg: <span class="keyword">RUN</span> [<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo hello&quot;</span>]</span><br><span class="line"></span><br><span class="line">ENV 命令</span><br><span class="line">	语法: ENV &lt;<span class="keyword">key</span>&gt; &lt;value&gt;</span><br><span class="line"></span><br><span class="line">	就是指定一个环境变量，会被后续的<span class="keyword">RUN</span>命令使用，并在容器运行时保持</span><br><span class="line"></span><br><span class="line">     eg: </span><br><span class="line">     ENV MYSQL_VERSION <span class="number">5.6</span></span><br><span class="line">     <span class="keyword">RUN</span> curl -SL <span class="string">&quot;http://dev.mysql.com/get/Downloads/MySQL-$MYSQL_VERSION/mysql-$MYSQL_VERSION-linux-glibc2.5-x86_64.tar.gz&quot;</span> -o mysql.tar.gz</span><br><span class="line"></span><br><span class="line">     可以使用$MYSQL_VERSION变量名获取后面的值<span class="number">5.6</span></span><br><span class="line"></span><br><span class="line">COPY 命令</span><br><span class="line">	语法: COPY &lt;src&gt; &lt;dest&gt;</span><br><span class="line"></span><br><span class="line">	复制本地主机的&lt;src&gt;为容器的&lt;dest&gt;，目标路径不存在的时候，会自动创建</span><br><span class="line"></span><br><span class="line">ADD 命令</span><br><span class="line">	语法: ADD &lt;src&gt; &lt;dest&gt;</span><br><span class="line"></span><br><span class="line">	复制指定的&lt;src&gt;到容器的&lt;dest&gt;，其中&lt;src&gt;可以是Dockerfile所在目录的一个相对路径（文件或目录）;也可以是一个URL;还可以是一个tar文件（自动解压为目录）</span><br><span class="line"></span><br><span class="line">EXPOSE 命令</span><br><span class="line">	语法: EXPOSE &lt;port&gt; [&lt;port&gt;...]</span><br><span class="line"></span><br><span class="line">	这条命令告诉容器需要开放的端口号，以提供给互联系统使用，启动容器的时候需要通过-p或者-P来分配这些端口</span><br><span class="line"></span><br><span class="line">    eg: EXPOSE <span class="number">80</span> <span class="number">443</span> <span class="number">22</span> <span class="number">8080</span>   </span><br><span class="line">    eg: docker <span class="keyword">run</span> -d -p <span class="number">1022</span>:<span class="number">22</span> -p <span class="number">1080</span>:<span class="number">80</span> -p <span class="number">1443</span>:<span class="number">443</span> nginx</span><br><span class="line"></span><br><span class="line">USER 命令</span><br><span class="line">    语法: USER daemon</span><br><span class="line"></span><br><span class="line">	指定运行容器时候的用户名或者UID，后续<span class="keyword">RUN</span>也会使用指定的用户</span><br><span class="line"></span><br><span class="line">WORKDIR	命令</span><br><span class="line">	语法: WORKDIR /path/<span class="keyword">to</span>/workdir</span><br><span class="line"></span><br><span class="line">    由于Dockerfile中不能使用cd命令，所以我们想要在哪个目录下操作的时候就需要切换进来。为后续的<span class="keyword">RUN</span>，CMD以及ENTRYPOINT指定工作的目录</span><br><span class="line">    可以使用多个WORKDIR命令，如果后面为相对路径，则是针对当前目录确定的</span><br><span class="line"></span><br><span class="line">    WORKDIR /x</span><br><span class="line">    WORKDIR y</span><br><span class="line">    WORKDIR z</span><br><span class="line">    最后进入的目录就是 /x/y/z   /x为根目录  y相对于x目录    z相对于y目录  所以最后就是/x/y/z    </span><br><span class="line"></span><br><span class="line">CMD	命令  </span><br><span class="line">    语法: </span><br><span class="line">        <span class="number">1</span>. CMD [<span class="string">&quot;executable&quot;</span>, <span class="string">&quot;param1&quot;</span>, <span class="string">&quot;param2&quot;</span>]使用exec执行，推荐方式。</span><br><span class="line">        <span class="number">2</span>. CMD command param1 param2在/bin/sh中执行，提供给需要交互的应用。</span><br><span class="line">        <span class="number">3</span>. CMD [<span class="string">&quot;param1&quot;</span>, <span class="string">&quot;param2&quot;</span>]提供给ENTRYPOINT的默认参数。</span><br><span class="line"></span><br><span class="line">        指定启动容器时执行的命令，每一个Dockerfile只能有一条CMD命令，如果有多条的话，只会执行最后一条。如果用户启动容器时指定了运行的命令，则CMD命令会被覆盖掉</span><br><span class="line">    </span><br><span class="line">ENTRYPOINT 命令</span><br><span class="line">    语法: ENTRYPOINT [<span class="string">&quot;executable&quot;</span>, <span class="string">&quot;param1&quot;</span>, <span class="string">&quot;param2&quot;</span>]或ENTRYPOINT command param1 param2（<span class="keyword">shell</span>中执行）</span><br><span class="line"></span><br><span class="line">    配置容器启动以后执行的命令，并且不能被docker <span class="keyword">run</span>命令提供的参数覆盖。每一个Dockerfile只能有一个ENTRYPOINT命令，当存在多个的时候就只有最后一个会生效</span><br><span class="line"></span><br><span class="line">VOLUME 命令</span><br><span class="line">    语法: VOLUME [<span class="string">&quot;/data&quot;</span>]</span><br><span class="line"></span><br><span class="line">    Docker容器是基于镜像创建的,在容器运行的时候可能产生一些数据,比如说运行一个MYSQL的容器,这时候会在容器中写入很多数据,如果我们将容器删除,那么整个数据库里面的数据都会被删除.</span><br><span class="line">    有没有一种方式可以将容器中产生的数据,保存到宿主机上,这样即便容器被删除,但是我们的数据还在.这个VOLUME属性就可以帮我们实现.</span><br><span class="line">    在我们运行Docker容器时候使用 -v参数可以将VOLUME设置的参数映射到宿主机上</span><br><span class="line">    </span><br><span class="line">LABEL 命令</span><br><span class="line">    语法: LABEL maintainer=<span class="string">&quot;SvenDowideit@home.org.au&quot;</span>  还可以设置作者 LABEL Author=<span class="string">&quot;张三&quot;</span></span><br><span class="line">    </span><br><span class="line">    代替MAINTAINER属性,LABEL设置更灵活</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注意: 以上命令根据Docker版本不同可能略有差异化,但是核心命令答题没有变化</span><br></pre></td></tr></table></figure>

<h4 id="3-2-Dockerfile命令使用"><a href="#3-2-Dockerfile命令使用" class="headerlink" title="3.2 Dockerfile命令使用"></a>3.2 Dockerfile命令使用</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1. 创建一个Dockerfile文件(文件名称叫做Dockerfile,没有后缀名)</span><br><span class="line">2. 写一个简单的入门的Dockerfile文件</span><br><span class="line">eg: 自定义一个内置tomcat的镜像(tomcat和基础镜像自己准备)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基础镜像</span></span><br><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line"><span class="comment"># 作者信息</span></span><br><span class="line">LABEL Author=<span class="string">&quot;夜泊1990&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将tomcat文件复制到容器的指定位置</span></span><br><span class="line">COPY ./tomcat  /usr/local/tomcat</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将jdk文件复制到容器的指定位置</span></span><br><span class="line">COPY ./jdk /usr/local/jdk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置镜像内部JDK的环境变量</span></span><br><span class="line">ENV JAVA_HOME /usr/local/jdk</span><br><span class="line">ENV PATH <span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定镜像端口号</span></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行镜像时执行的命令</span></span><br><span class="line">ENTRYPOINT /usr/local/tomcat/bin/startup.sh &amp;&amp; <span class="built_in">tail</span> -f /usr/local/tomcat/logs/catalina.out</span><br><span class="line"></span><br><span class="line">3. docker build -t hs/tomcat:v1.0 .</span><br><span class="line">4. 运行: docker run --name=<span class="string">&quot;app001&quot;</span> -d -p 8080:8080 -v /home/hs/web:/usr/local/tomcat/webapps/ hs/tomcat:v1.0</span><br><span class="line">5. 访问: http://192.168.130.128:8080/demo/</span><br></pre></td></tr></table></figure>

<h3 id="第4节-Docker-Compose"><a href="#第4节-Docker-Compose" class="headerlink" title="第4节 Docker Compose"></a>第4节 Docker Compose</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 官方地址: https:<span class="regexp">//gi</span>thub.com<span class="regexp">/docker/</span>compose</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. 注意: Compose只能在单主机上面进行多容器部署,不能在多主机进行容器部署,所以现在基本上都是用K8S进行操作,Compose在跨主机部署中使用较少</span><br></pre></td></tr></table></figure>

<h4 id="4-1-Compose-介绍"><a href="#4-1-Compose-介绍" class="headerlink" title="4.1 Compose 介绍"></a>4.1 Compose 介绍</h4><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">Compose 是一个可以定义和运行多个docker容器应用的工具,它使用一个YAML文件配置你的应用服务,并且使用一个命令就可以创建和启动配置里面的所有服务.</span><br></pre></td></tr></table></figure>

<h4 id="4-2-Compose-安装"><a href="#4-2-Compose-安装" class="headerlink" title="4.2 Compose 安装"></a>4.2 Compose 安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. 系统需求</span><br><span class="line"></span><br><span class="line">    1.1 首先Linux系统上面要安装了Docker引擎</span><br><span class="line">    1.2 运行Compose 最好是以一个非root用户运行</span><br><span class="line"></span><br><span class="line">    创建Linux新用户,并且添加群组</span><br><span class="line">    --&gt; 创建群组 groupadd dockerCompose</span><br><span class="line">    --&gt; 创建用户并添加进群组 useradd dockerCompose -m -s /bin/false -d /home/dockerCompose -g dockerCompose</span><br><span class="line"></span><br><span class="line">2. 安装步骤</span><br><span class="line">	2.1 下载Compose</span><br><span class="line">		<span class="built_in">sudo</span> curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/2.29.1/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose</span><br><span class="line">		</span><br><span class="line">		如果下载失败,可以直接去github上手动下载,下载地址: https://github.com/docker/compose/releases</span><br><span class="line">		例如下载此版本: https://github.com/docker/compose/releases/download/v2.29.1/docker-compose-linux-x86_64</span><br><span class="line">		</span><br><span class="line">	2.2 给Compose执行权限</span><br><span class="line">		<span class="built_in">sudo</span> <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br><span class="line">		</span><br><span class="line">	2.3 设置软连接</span><br><span class="line">		<span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br><span class="line"></span><br><span class="line">	2.4 查看Compose版本号</span><br><span class="line">		docker-compose --version</span><br><span class="line">		</span><br><span class="line">3. 注意事项</span><br><span class="line">	在下载Compose时，可能会因为网络原因造成下载失败,可以去github上面直接下载源文件然后上传到服务器的/usr/local/bin 目录下即可,如果下载的文件名字不叫docker-compose 可以使用<span class="built_in">mv</span>命令重新命名为docker-compose</span><br></pre></td></tr></table></figure>

<h4 id="4-3-Compose-使用"><a href="#4-3-Compose-使用" class="headerlink" title="4.3 Compose 使用"></a>4.3 Compose 使用</h4><h5 id="4-3-1-使用Compose部署一个web服务器"><a href="#4-3-1-使用Compose部署一个web服务器" class="headerlink" title="4.3.1 使用Compose部署一个web服务器"></a>4.3.1 使用Compose部署一个web服务器</h5><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 创建一个名为docker-compose.yml文件</span><br><span class="line"><span class="number">2</span>. 创建一个Dockerfile文件,docker-compose.yml基于Dockerfile运行(也可以不基于)</span><br><span class="line"><span class="number">3</span>. 准备Dockerfile文件和一个war包作为测试</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 选择镜像</span></span><br><span class="line">	<span class="keyword">from</span> tomcat</span><br><span class="line">	<span class="comment"># 作者信息</span></span><br><span class="line">    <span class="keyword">LABEL</span><span class="language-bash">  <span class="string">&quot;AUTHOR&quot;</span>=<span class="string">&quot;夜泊&quot;</span></span></span><br><span class="line">    <span class="comment"># 将测试的web项目部署到tomcat的webapp目录下</span></span><br><span class="line">    <span class="keyword">COPY</span><span class="language-bash"> ./web.war   /usr/local/tomcat/webapps</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>. 准备docker-compose.yml文件</span><br><span class="line"></span><br><span class="line">version: <span class="string">&quot;2.0&quot;</span> <span class="comment"># 版本,一般为2或者3版本</span></span><br><span class="line">services:      <span class="comment"># 服务器</span></span><br><span class="line">    web:      <span class="comment"># 服务器标记名称,名字自定义,为了区分services下的多个服务</span></span><br><span class="line">    	build: .    <span class="comment"># 构建当前根目录下的Dockerfile文件</span></span><br><span class="line">    	container_name: <span class="string">&#x27;app01&#x27;</span>   <span class="comment"># 给启动的容器起名字</span></span><br><span class="line">    	ports:                    <span class="comment"># 设置容器的宿主机的端口号映射,左侧为宿主机,右侧为容器</span></span><br><span class="line">    		- <span class="number">8081</span>:<span class="number">8080</span></span><br><span class="line">         </span><br><span class="line"><span class="number">5</span>. 在当前目录下敲击此命令启动服务: docker-compose up  如果后面带有 -d参数直接后台运行 docker-compose up -d</span><br><span class="line"><span class="number">6</span>. 宿主机浏览器访问 http://<span class="number">192.168</span>.<span class="number">142.128</span>:<span class="number">8081</span>/web/</span><br><span class="line"><span class="number">7</span>. 查看容器的实时日志 docker logs -f 容器ID/容器名称</span><br></pre></td></tr></table></figure>

<h5 id="4-3-2-使用Compose部署两个web服务器"><a href="#4-3-2-使用Compose部署两个web服务器" class="headerlink" title="4.3.2 使用Compose部署两个web服务器"></a>4.3.2 使用Compose部署两个web服务器</h5><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 创建一个名为docker-compose.yml文件</span><br><span class="line"><span class="number">2</span>. 创建一个Dockerfile文件,docker-compose.yml基于Dockerfile运行(也可以不基于)</span><br><span class="line"><span class="number">3</span>. 准备Dockerfile文件和一个war包作为测试</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 选择镜像</span></span><br><span class="line">	<span class="keyword">from</span> tomcat</span><br><span class="line">	<span class="comment"># 作者信息</span></span><br><span class="line">    <span class="keyword">LABEL</span><span class="language-bash">  <span class="string">&quot;AUTHOR&quot;</span>=<span class="string">&quot;夜泊&quot;</span></span></span><br><span class="line">    <span class="comment"># 将测试的web项目部署到tomcat的webapp目录下</span></span><br><span class="line">    <span class="keyword">COPY</span><span class="language-bash"> ./web.war   /usr/local/tomcat/webapps</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>. 准备docker-compose.yml文件</span><br><span class="line"></span><br><span class="line">version: <span class="string">&quot;2.0&quot;</span> <span class="comment"># 版本,一般为2或者3版本</span></span><br><span class="line">services:      <span class="comment"># 服务器</span></span><br><span class="line">    web1:      <span class="comment"># 服务器标记名称,名字自定义,为了区分services下的多个服务</span></span><br><span class="line">    	build: .    <span class="comment"># 构建当前根目录下的Dockerfile文件</span></span><br><span class="line">    	container_name: <span class="string">&#x27;app01&#x27;</span>   <span class="comment"># 给启动的容器起名字</span></span><br><span class="line">    	ports:                    <span class="comment"># 设置容器的宿主机的端口号映射,左侧为宿主机,右侧为容器</span></span><br><span class="line">    		- <span class="number">8081</span>:<span class="number">8080</span></span><br><span class="line">    web2:      <span class="comment"># 服务器标记名称,名字自定义,为了区分services下的多个服务</span></span><br><span class="line">    	build: .    <span class="comment"># 构建当前根目录下的Dockerfile文件</span></span><br><span class="line">    	container_name: <span class="string">&#x27;app02&#x27;</span>   <span class="comment"># 给启动的容器起名字</span></span><br><span class="line">    	ports:                    <span class="comment"># 设置容器的宿主机的端口号映射,左侧为宿主机,右侧为容器</span></span><br><span class="line">    		- <span class="number">8082</span>:<span class="number">8080</span></span><br><span class="line">         </span><br><span class="line"><span class="number">5</span>. 在当前目录下敲击此命令启动服务: docker-compose up  如果后面带有 -d参数直接后台运行 docker-compose up -d</span><br><span class="line"><span class="number">6</span>. 宿主机浏览器访问 </span><br><span class="line">	-&gt; http://<span class="number">192.168</span>.<span class="number">142.128</span>:<span class="number">8081</span>/web/</span><br><span class="line">	-&gt; http://<span class="number">192.168</span>.<span class="number">142.128</span>:<span class="number">8082</span>/web/</span><br></pre></td></tr></table></figure>

<h5 id="4-3-3-使用Compose部署两个web服务器"><a href="#4-3-3-使用Compose部署两个web服务器" class="headerlink" title="4.3.3 使用Compose部署两个web服务器"></a>4.3.3 使用Compose部署两个web服务器</h5><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">相比于<span class="number">3.3</span>.<span class="number">2</span> </span><br><span class="line"><span class="number">3.3</span>.<span class="number">2</span> 缺点: </span><br><span class="line">	<span class="number">1</span>. web1服务build构建Dockerfile生成一个新镜像,并且运行起来</span><br><span class="line">	<span class="number">2</span>. web2服务也build构建Dockerfile生成另一个镜像,并且运行起来,缺点就是构建同一个Dockerfile,生成同一个镜像,毫无意义</span><br><span class="line"><span class="number">3.3</span>.<span class="number">3</span> 对<span class="number">3.3</span>.<span class="number">2</span>的docker-compose.yml进行了修改</span><br><span class="line"></span><br><span class="line">version: <span class="string">&quot;3.9&quot;</span></span><br><span class="line">services:</span><br><span class="line">    web1:</span><br><span class="line">        build: .</span><br><span class="line">        image: <span class="string">&quot;web:1.0&quot;</span>    <span class="comment"># build构建Dockerfile时,生成镜像的镜像仓库名称和TAG版本</span></span><br><span class="line">        container_name: <span class="string">&#x27;app01&#x27;</span>  <span class="comment"># 给启动的容器起名字</span></span><br><span class="line">        ports:</span><br><span class="line">            - <span class="number">8081</span>:<span class="number">8080</span>          <span class="comment"># 端口号映射,冒号左侧是宿主机,冒号右侧是容器</span></span><br><span class="line">    web2:</span><br><span class="line">        image: <span class="string">&quot;web:1.0&quot;</span>    <span class="comment"># 第二个服务使用第一个镜像,不在重新构建</span></span><br><span class="line">        container_name: <span class="string">&#x27;app02&#x27;</span></span><br><span class="line">        ports:</span><br><span class="line">            - <span class="number">8082</span>:<span class="number">8080</span></span><br></pre></td></tr></table></figure>

<h2 id="第四章-常用的Docker镜像介绍和使用"><a href="#第四章-常用的Docker镜像介绍和使用" class="headerlink" title="第四章 常用的Docker镜像介绍和使用"></a>第四章 常用的Docker镜像介绍和使用</h2><h3 id="第1节-MYSQL安装"><a href="#第1节-MYSQL安装" class="headerlink" title="第1节 MYSQL安装"></a>第1节 MYSQL安装</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">1. 搜索mysql镜像,选择需要的镜像名字</span><br><span class="line">	docker search mysql</span><br><span class="line">	</span><br><span class="line">2. 从云端拉取镜像</span><br><span class="line">	docker pull mysql</span><br><span class="line">	</span><br><span class="line">3. 运行MYSQL镜像(参考第二章)</span><br><span class="line">	</span><br><span class="line">	docker <span class="built_in">run</span> <span class="attribute">--name</span>=mysql -it -p 3306:3306 -e <span class="attribute">MYSQL_ROOT_PASSWORD</span>=123456 -d 镜像ID</span><br><span class="line">	</span><br><span class="line">	eg:docker <span class="built_in">run</span> <span class="attribute">--name</span>=mysql -it -p 3306:3306 -e <span class="attribute">MYSQL_ROOT_PASSWORD</span>=123456 -d 7ce93a845a8a</span><br><span class="line">	</span><br><span class="line">4. 设置和访问</span><br><span class="line">	4.1 设置MYSQL访问权限,任务IP地址都可以访问</span><br><span class="line">		需要设置MYSQL中 mysql库中的user表中的root用户的host值,修改成 % </span><br><span class="line">		</span><br><span class="line">		第一步: 进入到正在运行的容器中(命令在上面第一章)</span><br><span class="line">			docker exec -it [容器ID] /bin/bash     容器ID通过 docker ps 获取</span><br><span class="line">			eg: docker exec -it 3127c8e72215 /bin/bash </span><br><span class="line">		</span><br><span class="line">		第二步: 使用mysql命令登陆MYSQL服务器</span><br><span class="line">			mysql -uroot -p 访问MYSQL服务器</span><br><span class="line">			</span><br><span class="line">		第三步: 修改mysql库中user表的root账户的host列的值</span><br><span class="line">			3.1 查询MYSQL服务器的所有库命令  show databases;</span><br><span class="line">			3.2 切换mysql库命令  use mysql;</span><br><span class="line">			3.3 查询用户名为root的用户信息命令  select user,host <span class="keyword">FROM</span><span class="built_in"> user </span>where <span class="attribute">user</span>=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">			3.4 如果查询出来的root用户的host的值有一个为%,那么就不需要在更新,如果root的host值不是%然后通过下面命令更新</span><br><span class="line">			3.5 更新用户root的host列的值,将其更新成% 命令为 update<span class="built_in"> user </span><span class="built_in">set</span> <span class="attribute">host</span>=<span class="string">&quot;%&quot;</span> WHERE <span class="attribute">user</span>=<span class="string">&quot;root&quot;</span>; </span><br><span class="line">			</span><br><span class="line">	4.2 使用navcat或者其他MYSQL客户端连接</span><br><span class="line">		通过 Linux命令 ifconfig 查看主机IP地址,然后通过navcat连接MYSQL</span><br><span class="line"></span><br><span class="line">注意: </span><br><span class="line">	1. MYSQL需要宿主机开放3306端口号,否则防火墙会屏蔽,不允许外部机器访问,所以需要关闭防火墙,或者配置3306可以穿透防火墙</span><br><span class="line">	2. 如果用的是云服务器,例如阿里云,那么可以手动配置3306端口号暴漏给用户,具体配置方式,查找阿里云配置手册</span><br></pre></td></tr></table></figure>

<h3 id="第2节-Redis安装"><a href="#第2节-Redis安装" class="headerlink" title="第2节 Redis安装"></a>第2节 Redis安装</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 搜索redis镜像,选择需要的镜像名字</span><br><span class="line">	docker search redis</span><br><span class="line">	</span><br><span class="line"><span class="number">2</span>. 从云端拉取镜像</span><br><span class="line">	docker pull redis</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>. 运行MYSQL镜像</span><br><span class="line">	docker run <span class="attr">--name</span> redis -<span class="selector-tag">p</span> <span class="number">6379</span>:<span class="number">6379</span>  -d <span class="selector-attr">[镜像ID]</span> <span class="attr">--requirepass</span> <span class="string">&quot;123456&quot;</span> <span class="attr">--appendonly</span> yes</span><br><span class="line">	eg: docker run <span class="attr">--name</span> redis -<span class="selector-tag">p</span> <span class="number">6379</span>:<span class="number">6379</span>  -d <span class="number">509</span>b2fc82da6 <span class="attr">--requirepass</span> <span class="string">&quot;123456&quot;</span> <span class="attr">--appendonly</span> yes</span><br><span class="line">	</span><br><span class="line"><span class="number">4</span>. 参数简单介绍:</span><br><span class="line">	<span class="attr">--requirepass</span> 设置密码可以不加,不给redis数据库设置密码</span><br><span class="line">	<span class="attr">--appendonly</span>  aof持久化,默认不开启,此参数可以不加,设置yes开启持久化</span><br><span class="line">	-d 参数要放在 <span class="attr">--requirepass</span>和<span class="attr">--appendonly</span>之前,否则可能报错</span><br><span class="line">	</span><br><span class="line">注意: </span><br><span class="line">	<span class="number">1</span>. Redis需要宿主机开放<span class="number">6379</span>端口号,否则防火墙会屏蔽,不允许外部机器访问,所以需要关闭防火墙,或者配置<span class="number">6379</span>可以穿透防火墙</span><br><span class="line">	<span class="number">2</span>. 如果用的是云服务器,例如阿里云,那么可以手动配置<span class="number">6379</span>端口号暴漏给用户,具体配置方式,查找阿里云配置手册	</span><br></pre></td></tr></table></figure>

<h3 id="第3节-RabbitMQ安装"><a href="#第3节-RabbitMQ安装" class="headerlink" title="第3节 RabbitMQ安装"></a>第3节 RabbitMQ安装</h3><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 搜索RabbitMQ镜像,选择需要的镜像名字(搜索带web页面的镜像)</span><br><span class="line">	docker search rabbitmq:management</span><br><span class="line">	</span><br><span class="line"><span class="number">2</span>. 从云端拉取镜像</span><br><span class="line">	docker pull rabbitmq:management</span><br><span class="line">	</span><br><span class="line"><span class="number">3</span>. 运行RabbitMQ镜像</span><br><span class="line">	docker run –name rabbitmq -d -p <span class="number">15672</span>:<span class="number">15672</span> -p <span class="number">5672</span>:<span class="number">5672</span> rabbitmq:management</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>. 查看容器运行日志</span><br><span class="line">	docker logs -f 容器ID        容器ID通过 docker ps  获取</span><br><span class="line">	eg: docker logs -f <span class="number">5507</span>c9379a8e</span><br><span class="line">	</span><br><span class="line">	从打印的日志中可以发现这几句日志信息</span><br><span class="line">    Creating <span class="keyword">user</span> <span class="title">‘guest</span>’ // 默认创建了用户名 guest</span><br><span class="line">    Setting <span class="keyword">user</span> <span class="title">tags</span> for <span class="keyword">user</span> <span class="title">‘guest</span>’ to [administrator] // 添加了administrator角色</span><br><span class="line">    Setting permissions for ‘guest’ <span class="keyword">in</span> ‘/‘ to ‘.‘, ‘.‘, ‘.*’ // 密码为 guest</span><br><span class="line">    </span><br><span class="line"><span class="number">5</span>. 访问web页面</span><br><span class="line">	通过 Linux命令 ifconfig 查看主机IP地址</span><br><span class="line">	在浏览器中输入:   http://<span class="number">192.168</span>.<span class="number">233.128</span>:<span class="number">15672</span></span><br><span class="line"></span><br><span class="line">注意: </span><br><span class="line">	<span class="number">1</span>. RabbitMQ需要宿主机开放<span class="number">15672</span>和<span class="number">5672</span>端口号,否则防火墙会屏蔽,不允许外部机器访问,所以需要关闭防火墙,或者配置<span class="number">15672</span>和<span class="number">5672</span>可以穿透防火墙</span><br><span class="line">	<span class="number">2</span>. 如果用的是云服务器,例如阿里云,那么可以手动配置<span class="number">15672</span>和<span class="number">5672</span>端口号暴漏给用户,具体配置方式,查找阿里云配置手册	</span><br></pre></td></tr></table></figure>

<h3 id="第4节-Docker控制面板安装"><a href="#第4节-Docker控制面板安装" class="headerlink" title="第4节 Docker控制面板安装"></a>第4节 Docker控制面板安装</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1. 搜索portainer镜像,选择需要的镜像名字</span><br><span class="line">	docker search portainer/portainer</span><br><span class="line">	</span><br><span class="line">2. 从云端拉取镜像</span><br><span class="line">	docker pull portainer/portainer</span><br><span class="line">	</span><br><span class="line">3. 运行portainer镜像</span><br><span class="line">	docker run -d -p 9000:9000 --name portainer --restart always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer</span><br><span class="line"></span><br><span class="line">4. web页面访问 控制面板</span><br><span class="line">	通过 Linux命令 ifconfig 查看主机IP地址</span><br><span class="line">	在浏览器中输入:   http://192.168.233.128:9000/</span><br><span class="line">	第一次访问,需要设置密码,设置完就可以访问了</span><br><span class="line"></span><br><span class="line">页面展示如下:</span><br></pre></td></tr></table></figure>

<img src="https://note.youdao.com/yws/api/personal/file/WEB92c220e1064e25bb0d697433231ec55f?method=download&shareKey=b944fbb7b284a9db9d0be8dec5327320">



<img src="https://note.youdao.com/yws/api/personal/file/WEB49b25efb6af2504c06232c147eedaeb5?method=download&shareKey=7a489963f3fad51d15f175045aa6d4ee">



<hr>
]]></content>
      <categories>
        <category>Linux(运维)</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>镜像</tag>
        <tag>命令</tag>
        <tag>Shell</tag>
        <tag>控制面板</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringSecurity快速入门</title>
    <url>/2025/04/25/SpringSecurity%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line"><span class="attribute">作者</span><span class="punctuation">:</span> <span class="string">夜泊1990</span></span><br><span class="line"><span class="attribute">企鹅</span><span class="punctuation">:</span> <span class="string">1611756908</span></span><br><span class="line"><span class="attribute">Q 群</span><span class="punctuation">:</span> <span class="string">948233848</span></span><br><span class="line"><span class="attribute">邮箱</span><span class="punctuation">:</span> <span class="string">hd1611756908@163.com</span></span><br><span class="line"><span class="attribute">博客</span><span class="punctuation">:</span> <span class="string">https://hs-an-yue.github.io/</span></span><br><span class="line"><span class="attribute">B 站</span><span class="punctuation">:</span> <span class="string">https://space.bilibili.com/514155929/</span></span><br></pre></td></tr></table></figure>

<hr>
<span id="more"></span>

<h2 id="第一章-SpringSecurity概述"><a href="#第一章-SpringSecurity概述" class="headerlink" title="第一章 SpringSecurity概述"></a>第一章 SpringSecurity概述</h2><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">保护<span class="keyword">JavaWeb网站安全的框架</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line">环境需求: </span><br><span class="line">	<span class="keyword">JDK1.8</span></span><br><span class="line"><span class="keyword"></span>	SpringBoot2.<span class="number">7</span>.<span class="number">6</span> 版本下的 SpringSecurity版本为 <span class="number">5</span>.<span class="number">7</span>.<span class="number">5</span></span><br><span class="line">	阿里云脚手架</span><br></pre></td></tr></table></figure>

<h2 id="第二章-SpringSecurity结构-内部原理"><a href="#第二章-SpringSecurity结构-内部原理" class="headerlink" title="第二章 SpringSecurity结构(内部原理)"></a>第二章 SpringSecurity结构(内部原理)</h2><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">了解 SpringSecurity 框架，需要了解JavaWeb的基础知识(Listener、<span class="built_in">Filter</span>、Servlet) 否则学习 SpringSecurity回很麻烦，根本看不懂。</span><br></pre></td></tr></table></figure>

<h3 id="第1节-JavaWeb-内部结构"><a href="#第1节-JavaWeb-内部结构" class="headerlink" title="第1节 JavaWeb 内部结构"></a>第1节 JavaWeb 内部结构</h3><img src="https://note.youdao.com/yws/api/personal/file/WEBe73fdc610c0483563fe8e1b635bda592?method=download&shareKey=80ddd63935c2ae13f2721725ae2cd754">

<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">上图是Javaweb的运行原理图，客户端(浏览器或者其他APP)发送请求，先经过多个过滤器，然后最后交给Servlet进行处理</span><br><span class="line"></span><br><span class="line">如果看不懂这个就不要往下看了 The <span class="keyword">End</span></span><br></pre></td></tr></table></figure>

<h3 id="第2节-SpringSecurity-内部结构"><a href="#第2节-SpringSecurity-内部结构" class="headerlink" title="第2节 SpringSecurity 内部结构"></a>第2节 SpringSecurity 内部结构</h3><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">SpringSecurity的核心其实就是<span class="built_in">Filter</span>   下面看一下它的设计演化</span><br></pre></td></tr></table></figure>

<table>
    <tr>
        <td>
            <img src="https://note.youdao.com/yws/api/personal/file/WEB7e640c96bc9542c679a4f7b65e5b5a9b?method=download&shareKey=4e4d7a40da5fa91d0556cfd4168ee088">
        </td>
        <td>
            <img src="https://note.youdao.com/yws/api/personal/file/WEB6181ac9a8b88f762a5f21fad422c43bb?method=download&shareKey=cf5110c3e158022872a6937ded9ac2a0">
        </td>
        <td>
            <img src="https://note.youdao.com/yws/api/personal/file/WEB41b4203528139d917098e39f97a224e7?method=download&shareKey=639e905e7e934eed21afdb39bb053d45">
        </td>
    </tr>
</table>

<img src="https://note.youdao.com/yws/api/personal/file/WEBbe89ab9285be7b9374c6816171f70e1e?method=download&shareKey=f1b789e94d5c77cb591f229b239601e5">

<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">官网地址: https:<span class="regexp">//</span>docs.spring.io<span class="regexp">/spring-security/</span>reference<span class="regexp">/5.8/</span>servlet/architecture.html</span><br><span class="line"></span><br><span class="line">官网中介绍了 SecurityFilterChain 是SpringSecurity的默认过滤器,这个过滤器提供了拦截规则以及登录逻辑,后面详细介绍</span><br></pre></td></tr></table></figure>

<h2 id="第三章-SpringSecurity内置案例"><a href="#第三章-SpringSecurity内置案例" class="headerlink" title="第三章 SpringSecurity内置案例"></a>第三章 SpringSecurity内置案例</h2><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">官方内置了一套简单的验证逻辑,自带登录页面<span class="comment">(登录功能)</span>和注销以及内置账户和密码,方便开发者快速入门，本章主要介绍内置案例</span><br></pre></td></tr></table></figure>

<h3 id="第1节-环境准备"><a href="#第1节-环境准备" class="headerlink" title="第1节 环境准备"></a>第1节 环境准备</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">1</span>. 创建SpringBoot项目，添加依赖</span><br><span class="line"><span class="attribute">SpringBoot</span>版本采用的 <span class="number">2</span>.<span class="number">7</span>.<span class="number">6</span> Java开发环境基于JDK1.<span class="number">8</span>，如果想使用更高版本，具体请查看官网</span><br></pre></td></tr></table></figure>

<img src="https://note.youdao.com/yws/api/personal/file/WEBfcfbde84a57eaf216a7c3a40ab02a169?method=download&shareKey=e68f915ce1bc45c2033e1e4f6f594a86">

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">2.</span> 项目创建完成后，删除无用的代码</span><br></pre></td></tr></table></figure>

<img src="https://note.youdao.com/yws/api/personal/file/WEB2115a3d07b43870a6348aef7a26f01a9?method=download&shareKey=8374fee1c3f61ae48d0f85f4aeb5cd10">

<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span>. 项目创建完成后,添加测试代码 HelloController<span class="selector-class">.java</span>  运行项目</span><br><span class="line"> 通过浏览器 http:<span class="comment">//127.0.0.1:8080/test1或者test2或者test3 查看效果</span></span><br></pre></td></tr></table></figure>

<img src="https://note.youdao.com/yws/api/personal/file/WEB56b98cb5222252f4d037d16a4c3e27ad?method=download&shareKey=516d910de72976fc5c261e7eea276501">

<img src="https://note.youdao.com/yws/api/personal/file/WEB2cff2f91dfff1f0816f746aef0e1ee4c?method=download&shareKey=5f6f319b8969f12cc97f3067d6214d0c">

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">4.</span> 运行原理图，根据原理图了解他的执行原理</span><br></pre></td></tr></table></figure>

<img src="https://note.youdao.com/yws/api/personal/file/WEB362bf470e64bb189d121fd034da619c3?method=download&shareKey=7a105cb918c04b1b33c215bbe23b7f12">

<h3 id="第2节-内置案例详细介绍"><a href="#第2节-内置案例详细介绍" class="headerlink" title="第2节 内置案例详细介绍"></a>第2节 内置案例详细介绍</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">官网: https:<span class="regexp">//</span>docs.spring.io<span class="regexp">/spring-security/</span>reference<span class="regexp">/5.8/</span>servlet<span class="regexp">/authentication/</span>passwords/<span class="keyword">in</span>-memory.html</span><br><span class="line">SpringSecurity内置案例核心API</span><br><span class="line"></span><br><span class="line">InMemoryUserDetailsManager: 内置账户信息管理类，是UserDetailsService的子类</span><br><span class="line">UserDetailsService: SpringSecurity用户信息管理类的核心接口,管理用户信息来源(数据库还是内存以及其他...)</span><br><span class="line">UserDetails: SpringSecurity封装用户信息的核心接口，给SpringSecurity送用户信息时SpringSecurity只认UserDetails</span><br><span class="line"></span><br><span class="line">以上的API是内置认证的简单API</span><br></pre></td></tr></table></figure>

<h3 id="第3节-修改内置的用户名和密码"><a href="#第3节-修改内置的用户名和密码" class="headerlink" title="第3节 修改内置的用户名和密码"></a>第3节 修改内置的用户名和密码</h3><figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line"><span class="attribute">官网</span><span class="punctuation">:</span> <span class="string">https://docs.spring.io/spring-security/reference/5.8/servlet/authentication/passwords/in-memory.html</span></span><br><span class="line"><span class="attribute">方式一</span><span class="punctuation">:</span> <span class="string">API方式(略)</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">方式二</span><span class="punctuation">:</span> <span class="string">配置文件方式</span></span><br><span class="line"><span class="attribute">spring</span><span class="punctuation">:</span></span><br><span class="line">  <span class="attribute">security</span><span class="punctuation">:</span></span><br><span class="line">    <span class="attribute">user</span><span class="punctuation">:</span></span><br><span class="line">      <span class="attribute">name</span><span class="punctuation">:</span> <span class="string">admin</span></span><br><span class="line">      <span class="attribute">password</span><span class="punctuation">:</span> <span class="string">123</span></span><br></pre></td></tr></table></figure>

<h2 id="第四章-替换系统自带用户名和密码的获取方式"><a href="#第四章-替换系统自带用户名和密码的获取方式" class="headerlink" title="第四章 替换系统自带用户名和密码的获取方式"></a>第四章 替换系统自带用户名和密码的获取方式</h2><h3 id="第1节-认证的运行原理"><a href="#第1节-认证的运行原理" class="headerlink" title="第1节 认证的运行原理"></a>第1节 认证的运行原理</h3><img src="https://note.youdao.com/yws/api/personal/file/WEB9a1d1fdd5586d5a9adbb5173a9fb4d71?method=download&shareKey=654a9ea8ba8eeb69b6b646ce89ab14c7">

<h3 id="第2节-替换默认生成的用户信息"><a href="#第2节-替换默认生成的用户信息" class="headerlink" title="第2节 替换默认生成的用户信息"></a>第2节 替换默认生成的用户信息</h3><h4 id="2-1-数据库表设计"><a href="#2-1-数据库表设计" class="headerlink" title="2.1 数据库表设计"></a>2.1 数据库表设计</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 当前流行的权限控制系统 RBAC 模式,所以数据库表设计基于 RBAC</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE rbac <span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用户表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span>(</span><br><span class="line">    user_id     <span class="type">BIGINT</span>          <span class="keyword">NOT</span> <span class="keyword">NULL</span>    <span class="keyword">PRIMARY</span> KEY     AUTO_INCREMENT      COMMENT <span class="string">&#x27;用户ID主键&#x27;</span>,</span><br><span class="line">    phone       <span class="type">VARCHAR</span>(<span class="number">50</span>)     <span class="keyword">NOT</span> <span class="keyword">NULL</span>    <span class="keyword">UNIQUE</span>                              COMMENT <span class="string">&#x27;手机号，唯一&#x27;</span>,</span><br><span class="line">    password    <span class="type">VARCHAR</span>(<span class="number">255</span>)    <span class="keyword">NOT</span> <span class="keyword">NULL</span>                                        COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">    username    <span class="type">VARCHAR</span>(<span class="number">100</span>)    <span class="keyword">NOT</span> <span class="keyword">NULL</span>                                        COMMENT <span class="string">&#x27;用户名&#x27;</span></span><br><span class="line">)AUTO_INCREMENT<span class="operator">=</span><span class="number">1000</span> <span class="keyword">DEFAULT</span> charset<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;用户表&#x27;</span>;</span><br><span class="line"><span class="comment">-- 角色表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> role(</span><br><span class="line">    role_id     <span class="type">BIGINT</span>          <span class="keyword">NOT</span> <span class="keyword">NULL</span>    <span class="keyword">PRIMARY</span> KEY     AUTO_INCREMENT      COMMENT <span class="string">&#x27;角色ID主键&#x27;</span>,</span><br><span class="line">    role_name   <span class="type">VARCHAR</span>(<span class="number">100</span>)    <span class="keyword">NOT</span> <span class="keyword">NULL</span>                                        COMMENT <span class="string">&#x27;角色名&#x27;</span></span><br><span class="line">)AUTO_INCREMENT<span class="operator">=</span><span class="number">1000</span> <span class="keyword">DEFAULT</span> charset<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;角色表&#x27;</span>;</span><br><span class="line"><span class="comment">-- 权限表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> permission(</span><br><span class="line">    permission_id     <span class="type">BIGINT</span>          <span class="keyword">NOT</span> <span class="keyword">NULL</span>    <span class="keyword">PRIMARY</span> KEY     AUTO_INCREMENT      COMMENT <span class="string">&#x27;权限ID主键&#x27;</span>,</span><br><span class="line">    permission_name   <span class="type">VARCHAR</span>(<span class="number">100</span>)    <span class="keyword">NOT</span> <span class="keyword">NULL</span>                                        COMMENT <span class="string">&#x27;权限名&#x27;</span></span><br><span class="line">)AUTO_INCREMENT<span class="operator">=</span><span class="number">1000</span> <span class="keyword">DEFAULT</span> charset<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;权限表&#x27;</span>;</span><br><span class="line"><span class="comment">-- 用户角色关联表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> user_role(</span><br><span class="line">    user_id     <span class="type">BIGINT</span>  <span class="keyword">NOT</span> <span class="keyword">NULL</span>   COMMENT <span class="string">&#x27;用户ID&#x27;</span>,</span><br><span class="line">    role_id     <span class="type">BIGINT</span>  <span class="keyword">NOT</span> <span class="keyword">NULL</span>   COMMENT <span class="string">&#x27;角色ID&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (user_id,role_id)</span><br><span class="line">) <span class="keyword">DEFAULT</span> charset<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;用户角色关联表&#x27;</span>;</span><br><span class="line"><span class="comment">-- 角色权限关联表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> role_permission(</span><br><span class="line">    role_id             <span class="type">BIGINT</span>  <span class="keyword">NOT</span> <span class="keyword">NULL</span>   COMMENT <span class="string">&#x27;角色ID&#x27;</span>,</span><br><span class="line">    permission_id       <span class="type">BIGINT</span>  <span class="keyword">NOT</span> <span class="keyword">NULL</span>   COMMENT <span class="string">&#x27;权限ID&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (role_id,permission_id)</span><br><span class="line">) <span class="keyword">DEFAULT</span> charset<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;角色权限关联表&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-添加依赖"><a href="#2-2-添加依赖" class="headerlink" title="2.2 添加依赖"></a>2.2 添加依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 数据库驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ORM框架 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 省略GET/SET等工具类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-3-代码实现"><a href="#2-3-代码实现" class="headerlink" title="2.3 代码实现"></a>2.3 代码实现</h4><blockquote>
<p>第一步: 配置文件(配置数据库，配置mybatis)</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/rbac?characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">mapper/*.xml</span>       <span class="comment"># 映射接口的xml文件</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.hs.entity</span>  <span class="comment"># 类型别名</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span> <span class="comment"># 驼峰命名</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>第二步: 映射数据库表的实体类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据库用户表 - user</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 用户ID</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> Long userId;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 手机号</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> String phone;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 密码</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> String password;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 用户名</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> String username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据库角色表 - role</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Role</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 角色ID</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> Long roleId;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 角色名称</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> String roleName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据库权限表 - permission</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Permission</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 权限ID</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> Long permissionId;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 权限名称</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> String permissionName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据库用户角色关联表 - user_role</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRole</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 用户ID</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> Long userId;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 角色ID</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> Long roleId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据库角色权限关联表 - role_permission</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RolePermission</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 角色ID</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> Long roleId;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 权限ID</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> Long permissionId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://note.youdao.com/yws/api/personal/file/WEB2aacee7261518e95d8fdc07e5af411d0?method=download&shareKey=afff0df0c4b1d7efca50efa180fe8b62">

<blockquote>
<p>第三步: mapper层实现使用用户名获取用户信息的函数</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户表操作,使用手机号用来代替用户登录账号</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过手机号获取用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phone 手机号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    User <span class="title function_">getUserByPhone</span><span class="params">(String phone)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://note.youdao.com/yws/api/personal/file/WEBaaaf896fe97df310f95d1a14215de05d?method=download&shareKey=c55566a586ce710f8c8d41f3d2f5db1e">

<blockquote>
<p>第四步:  UserDetails接口实现,封装用户信息(给SpringSecurity送数据)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 封装用户信息</span></span><br><span class="line"><span class="comment"> * SpringSecurity规定给他传递的用户信息必须是UserDetails接口的子类实例对象进行封装</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginUserDetails</span> <span class="keyword">implements</span> <span class="title class_">UserDetails</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoginUserDetails</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoginUserDetails</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 暂时只实现认证,不实现授权,所以这边权限给空集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//装配密码</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user.getPassword();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//装配账户,这里用手机号作为登录账号</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user.getPhone();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//账号是否过期,在数据库中没有设置,给默认值不过期</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//账号是否锁定,在数据库中没有设置,给默认值不锁定</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonLocked</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//密码是否过期,在数据库中没有设置,给默认值不过期</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCredentialsNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//账号是否可用,在数据库中没有设置,给默认值可用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>第五步: 替换 InMemoryUserDetailsManager 实现 UserDetailsService方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UserDetailsService是Spring Security提供的从数据库获取数据的核心接口</span></span><br><span class="line"><span class="comment"> * 实现 UserDetailsService 重写里面的 loadUserByUsername方法,替换默认从内存中获取用户信息</span></span><br><span class="line"><span class="comment"> * 具体loadUserByUsername方法中的逻辑可以参考InMemoryUserDetailsManager实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="comment">//通过用户名从数据库中查询用户信息(这个用户名从前端传递过来时可以使用手机号，邮箱或者其他用户账号)</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.getUserByPhone(username);</span><br><span class="line">        <span class="comment">//判断当前账号是否存在</span></span><br><span class="line">        <span class="keyword">if</span>(Objects.isNull(user))&#123;</span><br><span class="line">            <span class="comment">//如果为空，直接抛出异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(username);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 不为空说明数据库中存在,将信息送到SpringSecurity上下文中</span></span><br><span class="line"><span class="comment">         * 参考InMemoryUserDetailsManager类中的loadUserByUsername方法逻辑</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LoginUserDetails</span>(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://note.youdao.com/yws/api/personal/file/WEB4ea86cd2dba07d9bc0986ad97ea39134?method=download&shareKey=e241d66733203ea7c21a0dfb5c5c9db0">

<blockquote>
<p>第五步: 在数据库user表中添加测试账户</p>
</blockquote>
<img src="https://note.youdao.com/yws/api/personal/file/WEB71a7263e2545735089a684e5b87d9b51?method=download&shareKey=5df97960d8ed771d3393b5d53cf0740f">

<blockquote>
<p>第六步: 验证基于数据库的登录是否生效替换了默认用户名和密码的形式</p>
</blockquote>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">验证是否生效</span><br><span class="line"><span class="section">第一步: 启动项目</span></span><br><span class="line"><span class="section">第二步: 在浏览器中输入 http://127.0.0.1:8080/test1 服务会自动跳转到SpringSecurity的内置登录页面</span></span><br><span class="line"><span class="section">第三步: 数据在数据库中自己添加的用户信息</span></span><br><span class="line"><span class="section">第四步: 查看现象  </span></span><br><span class="line"><span class="section">注意: 肯定会失败，因为密码，因为密码现在在数据库中是明文的，需要设置明文规则 如果在密码前添加&#123;noop&#125;，可以不需要进行加密</span></span><br><span class="line"></span><br><span class="line">修改密码后，浏览器中继续测试，就会成功</span><br></pre></td></tr></table></figure>

<img src="https://note.youdao.com/yws/api/personal/file/WEB799bc44155c9075fe4e0e8b444797a6d?method=download&shareKey=b1ff8383aa76ffd912279a8244c67c40">

<blockquote>
<p>第七步: 如果想数据库中的密码是密文，可以使用 BCryptPasswordEncoder 进行加密和解密</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 创建配置类</span><br><span class="line"><span class="bullet">2.</span> 将 BCryptPasswordEncoder 加入到IOC容器中，SpringSecurity 自动生效</span><br></pre></td></tr></table></figure>

<img src="https://note.youdao.com/yws/api/personal/file/WEB4779813fbac6952fa654647726b693a7?method=download&shareKey=47edcd0978cb24a1a572cbab429940e9">

<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">编写测试代码，将明文密码加密成密文,保存到数据库中,然后在继续使用浏览器测试.</span><br></pre></td></tr></table></figure>

<img src="https://note.youdao.com/yws/api/personal/file/WEBf0fed4d2be8e67dc144e5126951db406?method=download&shareKey=202bc25ff453b95c5b3b1f4445189e40">

<img src="https://note.youdao.com/yws/api/personal/file/WEBf0c4d088d82c133f0434c0485b42ce80?method=download&shareKey=f5332742f8f0c8f86835399369f5ef7a">

<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line">在浏览器中输入 http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8080</span>/test1 会跳转到登录页,在登录页输入 用户名/密码  <span class="number">18233333333</span>/<span class="number">123456</span> 看测试结果</span><br></pre></td></tr></table></figure>

<h2 id="第五章-替换页面登录为前后端分离方式"><a href="#第五章-替换页面登录为前后端分离方式" class="headerlink" title="第五章 替换页面登录为前后端分离方式"></a>第五章 替换页面登录为前后端分离方式</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">前后端分离架构是当前最流行的软件架构模式</span><br><span class="line"></span><br><span class="line">下面需要修改SpringSecurity默认的逻辑，改成成前后端分离的架构模式。</span><br><span class="line"><span class="bullet">1.</span> 替换掉登陆页面</span><br><span class="line"><span class="bullet">2.</span> 修改从内置登录页面获取用户名和密码的逻辑</span><br><span class="line"><span class="bullet">3.</span> 修改内部默认跳转登录页面的逻辑</span><br><span class="line"><span class="bullet">4.</span> 修改登录失败的逻辑</span><br></pre></td></tr></table></figure>

<h3 id="第0节-前期准备"><a href="#第0节-前期准备" class="headerlink" title="第0节 前期准备"></a>第0节 前期准备</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">在设计前后端分离的认证前，需要针对当前项目做一些约束</span><br><span class="line"><span class="bullet">1.</span> 设计前后端分离架构的统一返回值(无论是成功还是失败，后端给前端返回的数据结构是相同的)</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统一返回值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应状态码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code=<span class="number">200</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应提示消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String msg=<span class="string">&quot;成功&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">ok</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">ok</span><span class="params">(Object data)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">error</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">(Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = -<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">(<span class="type">int</span> code, String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://note.youdao.com/yws/api/personal/file/WEBc328dc38eb2cd4060ec372e5a861bdbe?method=download&shareKey=3ae1d204b6dcae18be7eaba80912af19">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将前面测试 HelloController.java中的返回值进行统一修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试控制器</span></span><br><span class="line"><span class="comment"> * 验证SpringSecurity是否生效</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="comment">//测试方法1</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/test1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test1...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(<span class="string">&quot;test1...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//测试方法2</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/test2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test2...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(<span class="string">&quot;test2...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//测试方法3</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/test3&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test3...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(<span class="string">&quot;test3...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第1节-替换内置登录验证逻辑"><a href="#第1节-替换内置登录验证逻辑" class="headerlink" title="第1节 替换内置登录验证逻辑"></a>第1节 替换内置登录验证逻辑</h3><h4 id="1-1-登录验证流程图"><a href="#1-1-登录验证流程图" class="headerlink" title="1.1 登录验证流程图"></a>1.1 登录验证流程图</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">此流程图是基于前后端不分离的表单流程图，和前后端分离的流程基本上一模一样，后面实现前后端分离的登录，参考此流程</span><br></pre></td></tr></table></figure>

<img src="https://note.youdao.com/yws/api/personal/file/WEB229b5c0ee6acf05d87618f88c1285a55?method=download&shareKey=660c8fce8de065db74aca9a0035e38dd">

<h4 id="1-2-登录核心API介绍"><a href="#1-2-登录核心API介绍" class="headerlink" title="1.2 登录核心API介绍"></a>1.2 登录核心API介绍</h4><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">根据登录流程图介绍登录相关API</span><br><span class="line"></span><br><span class="line"><span class="symbol">SecurityFilterChain:</span> SpringSecurity核心过滤器,SpringSecurity默认会自动创建一个此对象，用来支持自带的登录，现在采用前后端分离，登录逻辑发生变化，所以需要我们自己创建SpringSecurity来覆盖默认的。</span><br><span class="line"></span><br><span class="line"><span class="symbol">UsernamePasswordAuthenticationToken:</span> 封装前端页面传递过来的用户名和密码，封装好后通过AuthenticationManager传递给SpringSecurity上下文</span><br><span class="line"></span><br><span class="line"><span class="symbol">AuthenticationManager:</span> SpringSecurity的认证管理器，见名知意，用来进行认证</span><br><span class="line"></span><br><span class="line"><span class="symbol">Authentication:</span> 认证实例，认证成功后，里面封装认证成功后的信息</span><br><span class="line"></span><br><span class="line">流程图总的其它API暂时使用不上，不做介绍</span><br></pre></td></tr></table></figure>

<h4 id="1-3-登录逻辑代码实现"><a href="#1-3-登录逻辑代码实现" class="headerlink" title="1.3 登录逻辑代码实现"></a>1.3 登录逻辑代码实现</h4><blockquote>
<p>配置认证管理器实例</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringSecurity 认证管理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManager</span><span class="params">(AuthenticationConfiguration authenticationConfiguration)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">return</span> authenticationConfiguration.getAuthenticationManager();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置 <strong>SecurityFilterChain</strong> </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringSecurity过滤器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SecurityFilterChain <span class="title function_">filterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    http.csrf().disable() <span class="comment">//防止跨站请求伪造</span></span><br><span class="line">        .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS) <span class="comment">//取消session</span></span><br><span class="line">        .and()</span><br><span class="line">        .authorizeRequests()</span><br><span class="line">        .antMatchers(<span class="string">&quot;/login&quot;</span>).permitAll() <span class="comment">//登陆和未登录的人都可以访问访问</span></span><br><span class="line">        .anyRequest().authenticated()<span class="comment">//除了上面设置的地址可以匿名访问,其它所有的请求地址需要认证访问</span></span><br><span class="line">    <span class="keyword">return</span> http.build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://note.youdao.com/yws/api/personal/file/WEBeb3fa533df9070d2746eed7323ab7fdf?method=download&shareKey=6e82208f1777fb28a447fdf679a0db41">

<blockquote>
<p>登录逻辑实现</p>
</blockquote>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">官网案例: </span><br><span class="line">	https:<span class="regexp">//</span>docs.spring.io<span class="regexp">/spring-security/</span>reference<span class="regexp">/5.8/</span>servlet<span class="regexp">/authentication/</span>architecture.html</span><br><span class="line">	https:<span class="regexp">//</span>docs.spring.io<span class="regexp">/spring-security/</span>reference<span class="regexp">/5.8/</span>servlet<span class="regexp">/authentication/</span>passwords/index.html</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phone    手机号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 响应结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(String phone,String password)</span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * SpringSecurity 的认证逻辑</span></span><br><span class="line"><span class="comment">         * 默认情况SpringSecurity内置了登录页面,内置了从页面获取数据,并将其数据送到SpringSecurity上下文的方式</span></span><br><span class="line"><span class="comment">         * 当前前后端分离的逻辑，数据不再从页面获取，所以不能再使用内置逻辑，需要程序员自己实现将数据送到SpringSecurity上下文中</span></span><br><span class="line"><span class="comment">         * 官网地址: https://docs.spring.io/spring-security/reference/5.8/servlet/authentication/passwords/form.html</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//封装用户名(手机号作为用户名)和密码</span></span><br><span class="line">        <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authenticationToken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(phone,password);</span><br><span class="line">        <span class="comment">//调用认证管理中的认证方法，调用后可能出现异常，所以需要try...catch</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Authentication</span> <span class="variable">authenticate</span> <span class="operator">=</span> authenticationManager.authenticate(authenticationToken);</span><br><span class="line">            <span class="comment">//如果认证成功Authentication中就会有用户信息,否则为空</span></span><br><span class="line">            <span class="keyword">if</span>(Objects.isNull(authenticate))&#123;</span><br><span class="line">                <span class="comment">//认证失败</span></span><br><span class="line">                <span class="keyword">return</span> Result.error(<span class="string">&quot;认证失败,用户名或密码错误&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (RuntimeException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">//认证失败</span></span><br><span class="line">            <span class="keyword">return</span> Result.error(<span class="string">&quot;认证失败,用户名或密码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://note.youdao.com/yws/api/personal/file/WEBa35c2b71e8628b47b2a0085e899dc9bb?method=download&shareKey=842faefce39826c3bcabb26a08456d95">

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">代码完成后进行测试，因为没有前端页面所以需要一个客户端工具进行测试,我这里采用postman进行测试</span><br></pre></td></tr></table></figure>

<img src="https://note.youdao.com/yws/api/personal/file/WEBa6c15f9411e402f10a3f662e5a39d7d6?method=download&shareKey=66d212e9907c7f8ca9f7d152d091eb27">

<img src="https://note.youdao.com/yws/api/personal/file/WEBd5e7b2211b3f7ef68546daa70b051cab?method=download&shareKey=c2300cbe73d63169e043a8b7e62e0345">

<figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line"><span class="attribute">上面是调用登录接口成功和失败的样式</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">还有另外一种情况，在未登录的情况下，访问了其它资源 例如</span><span class="punctuation">:</span> <span class="string">http://127.0.0.1:8080/test1</span></span><br><span class="line"><span class="attribute">注意</span><span class="punctuation">:</span> <span class="string">有人会有疑问，说我前面已经登陆了为什么还不能访问，那是因为前后端分离项目不在是Session-Cookie机制</span></span><br></pre></td></tr></table></figure>

<img src="https://note.youdao.com/yws/api/personal/file/WEB27824ed3cd14c747fc3cb3eb7ed9ff2d?method=download&shareKey=669de91c8b3e9e30edb84cddbb9bd230">

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">未登录访问其它资源怎么处理呢？下面介绍 ↓↓↓↓↓↓↓↓</span><br></pre></td></tr></table></figure>

<h3 id="第2节-修改未登录访问其它资源的逻辑处理"><a href="#第2节-修改未登录访问其它资源的逻辑处理" class="headerlink" title="第2节 修改未登录访问其它资源的逻辑处理"></a>第2节 修改未登录访问其它资源的逻辑处理</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">实现此功能需要的步骤如下:</span><br><span class="line">第一步: 添加依赖(json工具依赖)</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">第二步: 实现AuthenticationEntryPoint接口，实现自定义的处理器</span><br><span class="line">第三步: 将自定义的处理器注册到Spring Security的核心Filter中</span><br><span class="line">第四步: 测试是否生效</span><br></pre></td></tr></table></figure>

<blockquote>
<p>第二步</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在未认证或者认证错误的情况下访问需要认证的资源时的处理类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span>  <span class="comment">//加入到IOC容器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginUnAuthenticationEntryPointHandler</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationEntryPoint</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 当访问一个需要认证的资源时因为当前用户没有认证或者认证失败，直接访问资源会交给此函数进行处理</span></span><br><span class="line"><span class="comment">     * 因为架构是前后端分离的项目,所以给客户端的提示保持和控制器的返回值格式相同</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commence</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> Result.error(<span class="string">&quot;用户未认证或登录已过期，请重新登录后再访问&quot;</span>);</span><br><span class="line">        <span class="comment">//将消息json化</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSONUtil.toJsonStr(result);</span><br><span class="line">        <span class="comment">//送到客户端</span></span><br><span class="line">        response.getWriter().print(json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://note.youdao.com/yws/api/personal/file/WEBe54fab7d293daf8b4feebfcb9ec14149?method=download&shareKey=9b2b45d425f438805a032e05fb37d4cb">

<blockquote>
<p>第三步</p>
</blockquote>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">将自定义的处理器注册到Spring <span class="keyword">Security</span>的核心过滤器中</span><br></pre></td></tr></table></figure>

<img src="https://note.youdao.com/yws/api/personal/file/WEB1976c6fcf6e44d70bf85923a071072ba?method=download&shareKey=ad54519538229652e82bea6f56cb52bb">

<blockquote>
<p>第四步</p>
</blockquote>
<img src="https://note.youdao.com/yws/api/personal/file/WEBe458b5259477e0406dc04a7df2ed6304?method=download&shareKey=83576b45dd4efb9a4612bffdd5d01fb5">

<h3 id="第3节-解决HTTP协议无状态"><a href="#第3节-解决HTTP协议无状态" class="headerlink" title="第3节 解决HTTP协议无状态"></a>第3节 解决HTTP协议无状态</h3><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">传统前后端不分离的架构采用Session+Cookie机制</span><br><span class="line"></span><br><span class="line">现在前后端分离架构，采用<span class="built_in">token</span>令牌方式</span><br><span class="line"></span><br><span class="line"><span class="built_in">token</span>生成采用JWT工具生成和校验,使用Redis数据库进行保存</span><br></pre></td></tr></table></figure>

<h4 id="3-1-Redis数据库安装和启动"><a href="#3-1-Redis数据库安装和启动" class="headerlink" title="3.1 Redis数据库安装和启动"></a>3.1 Redis数据库安装和启动</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">略</span><br></pre></td></tr></table></figure>

<h4 id="3-2-JWT工具类编写"><a href="#3-2-JWT工具类编写" class="headerlink" title="3.2 JWT工具类编写"></a>3.2 JWT工具类编写</h4><blockquote>
<p>添加依赖</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JWT工具类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- redis客户端 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>工具类代码实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JWT工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Algorithm</span> <span class="variable">hmac256</span> <span class="operator">=</span> Algorithm.HMAC256(<span class="string">&quot;YLWTSMTJFYHDCMGSCWHSSYBZSDKC&quot;</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pub  负载</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expiresTime 过期时间（单位 毫秒）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">sign</span><span class="params">(String pub, Long expiresTime)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JWT.create() <span class="comment">//生成令牌函数</span></span><br><span class="line">                .withIssuer(pub) <span class="comment">//自定义负载部分,其实就是添加Claim(jwt结构中的payload部分),可以通过源码查看</span></span><br><span class="line">                .withExpiresAt(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis()+expiresTime)) <span class="comment">//添加过期时间</span></span><br><span class="line">                .sign(hmac256);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">verify</span><span class="params">(String token)</span>&#123;</span><br><span class="line">        <span class="type">JWTVerifier</span> <span class="variable">verifier</span> <span class="operator">=</span> JWT.require(hmac256).build();</span><br><span class="line">        <span class="comment">//如果正确,直接代码向下执行,如果错误,抛异常</span></span><br><span class="line">        verifier.verify(token);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从token中获取负载</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token 令牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 保存的负载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getClaim</span><span class="params">(String token)</span>&#123;</span><br><span class="line">        <span class="type">DecodedJWT</span> <span class="variable">jwt</span> <span class="operator">=</span> JWT.decode(token);</span><br><span class="line">        <span class="type">Claim</span> <span class="variable">iss</span> <span class="operator">=</span> jwt.getClaim(<span class="string">&quot;iss&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> iss.asString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://note.youdao.com/yws/api/personal/file/WEBf111e2e6c146f360346df89ead641d05?method=download&shareKey=83c050a5e071a64e3fd9750548c18e95">

<h4 id="3-3-Redis客户端实现"><a href="#3-3-Redis客户端实现" class="headerlink" title="3.3 Redis客户端实现"></a>3.3 Redis客户端实现</h4><blockquote>
<p>配置文件修改</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/rbac?characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>  <span class="comment"># redis服务器地址</span></span><br><span class="line">    <span class="attr">password:</span>        <span class="comment"># redis服务器密码，我这里没有设置密码</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span>      <span class="comment"># redis的库，我这里用0号库</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">mapper/*.xml</span>       <span class="comment"># 映射接口的xml文件</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.hs.entity</span>  <span class="comment"># 类型别名</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span> <span class="comment"># 驼峰命名</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>代码实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Redis客户端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisClient</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span> <span class="params">(String key,String value)</span>&#123;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(key,value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存数据-过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value  值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time   过期时间,单位是 毫秒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span> <span class="params">(String key,String value,Long time)</span>&#123;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(key,value,time, TimeUnit.MILLISECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过键获取对应的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>    值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">(String key)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过键删除对应的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">del</span><span class="params">(String key)</span>&#123;</span><br><span class="line">        stringRedisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">exists</span><span class="params">(String key)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stringRedisTemplate.hasKey(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-4-登录逻辑修改"><a href="#3-4-登录逻辑修改" class="headerlink" title="3.4 登录逻辑修改"></a>3.4 登录逻辑修改</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisClient redisClient;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phone    手机号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 响应结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(String phone,String password)</span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * SpringSecurity 的认证逻辑</span></span><br><span class="line"><span class="comment">         * 默认情况SpringSecurity内置了登录页面,内置了从页面获取数据,并将其数据送到SpringSecurity上下文的方式</span></span><br><span class="line"><span class="comment">         * 当前前后端分离的逻辑，数据不再从页面获取，所以不能再使用内置逻辑，需要程序员自己实现将数据送到SpringSecurity上下文中</span></span><br><span class="line"><span class="comment">         * 官网地址: https://docs.spring.io/spring-security/reference/5.8/servlet/authentication/passwords/form.html</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//封装用户名(手机号作为用户名)和密码</span></span><br><span class="line">        <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authenticationToken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(phone,password);</span><br><span class="line">        <span class="comment">//调用认证管理中的认证方法，调用后可能出现异常，所以需要try...catch</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Authentication</span> <span class="variable">authenticate</span> <span class="operator">=</span> authenticationManager.authenticate(authenticationToken);</span><br><span class="line">            <span class="comment">//如果认证成功Authentication中就会有用户信息,否则为空</span></span><br><span class="line">            <span class="keyword">if</span>(Objects.isNull(authenticate))&#123;</span><br><span class="line">                <span class="comment">//认证失败</span></span><br><span class="line">                <span class="keyword">return</span> Result.error(<span class="string">&quot;认证失败,用户名或密码错误&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//登录成功将用户信息保存到redis中,以token作为key</span></span><br><span class="line">            <span class="type">LoginUserDetails</span> <span class="variable">principal</span> <span class="operator">=</span> (LoginUserDetails) authenticate.getPrincipal();</span><br><span class="line">            <span class="keyword">if</span>(Objects.isNull(principal))&#123;</span><br><span class="line">                <span class="keyword">return</span> Result.error(<span class="string">&quot;认证失败,用户名或密码错误&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//将用户信息json化</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSONUtil.toJsonStr(principal);</span><br><span class="line">            <span class="comment">//使用token作为redis的key 格式为 login:token</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JwtUtils.sign(principal.getUsername(), <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7L</span>);<span class="comment">//过期时间为7天</span></span><br><span class="line">            <span class="comment">//将用户信息json化后保存到redis中</span></span><br><span class="line">            redisClient.set(<span class="string">&quot;login:token:&quot;</span>+token,json,<span class="number">1000</span>*<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7L</span>); <span class="comment">//过期时间7天</span></span><br><span class="line">            Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            map.put(<span class="string">&quot;token&quot;</span>,token);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(map);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (RuntimeException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">//认证失败</span></span><br><span class="line">            <span class="keyword">return</span> Result.error(<span class="string">&quot;认证失败,用户名或密码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://note.youdao.com/yws/api/personal/file/WEB8165f834cb44ce1df366c36206df8d9d?method=download&shareKey=df51c0299ac78d4ddb741c6f86718fcc">

<img src="https://note.youdao.com/yws/api/personal/file/WEBc28eeaa89f579fd6e6e79f24af748ecb?method=download&shareKey=8ca0ad53baef0d00a0f015e8da9bf2b0">

<h4 id="3-5-其它资源访问基于token令牌方式"><a href="#3-5-其它资源访问基于token令牌方式" class="headerlink" title="3.5 其它资源访问基于token令牌方式"></a>3.5 其它资源访问基于token令牌方式</h4><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">使用令牌方式，替换前后端不分离的<span class="keyword">session</span>-cookie机制，解决HTTP无状态的问题</span><br></pre></td></tr></table></figure>

<blockquote>
<p>SpringSecurity运行原理</p>
</blockquote>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">简单了解一下<span class="title class_">SpringSecurity</span>的功能实现 </span><br><span class="line"><span class="title class_">SpringSecurity</span>的核心是<span class="title class_">Filter</span>(过滤器)，核心功能实现也是由一个个过滤器组成，详情请查看官网</span><br><span class="line"></span><br><span class="line">官网<span class="symbol">:https</span><span class="symbol">://docs</span>.spring.io/spring-security/reference/<span class="number">5.8</span>/servlet/architecture.html<span class="comment">#servlet-security-filters</span></span><br><span class="line"></span><br><span class="line">下面是<span class="title class_">SpringSecurity</span>内置的过滤器</span><br></pre></td></tr></table></figure>

<img src="https://note.youdao.com/yws/api/personal/file/WEB52f40e6809e137c548c5e3abd11b9121?method=download&shareKey=84d52ee26afff59a00daca9fd5cda53f">

<img src="https://note.youdao.com/yws/api/personal/file/WEB48c2025fadcee0b1bcedb7fd4b4038d5?method=download&shareKey=aff930fae7b299f5716c28730ebe03f7">

<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">简单画了一个SpringSecurity原理图，客戶端发送过来的请求会经过一个个的过滤器，每一个过滤器承担着不同的功能</span><br><span class="line">例如UsernamePasswordAuthenticationFilter过滤器帮助我们校验账户和密码</span><br><span class="line"></span><br><span class="line">现在我们要模拟session+cookie机制，通过<span class="built_in">token</span>凭据实现权限控制，方式如下</span><br></pre></td></tr></table></figure>

<img src="https://note.youdao.com/yws/api/personal/file/WEB27aebd74dd4142d001070c0cc1f2c872?method=download&shareKey=9d1c860563ec141a4819b8f190299200">

<blockquote>
<p>基于token机制的实现</p>
</blockquote>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">第一步: 自定义 <span class="built_in">Filter</span></span><br><span class="line">第二步: 注册到SpringSecurity的<span class="built_in">Filter</span>中</span><br></pre></td></tr></table></figure>

<blockquote>
<blockquote>
<p>第一步</p>
</blockquote>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义过滤器，实现token令牌的判断</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthenticationTokenFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisClient redisClient;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取请求头</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.hasLength(token))&#123;</span><br><span class="line">            <span class="comment">//redis中获取用户信息</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;login:token:&quot;</span>+token;</span><br><span class="line">            <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> redisClient.get(key);</span><br><span class="line">            <span class="keyword">if</span>(StringUtils.hasLength(json))&#123;</span><br><span class="line">                <span class="comment">//反序列化</span></span><br><span class="line">                <span class="type">LoginUserDetails</span> <span class="variable">user</span> <span class="operator">=</span> JSONUtil.toBean(json, LoginUserDetails.class);</span><br><span class="line">                <span class="keyword">if</span>(Objects.nonNull(user))&#123;</span><br><span class="line">                    <span class="comment">//封装用户信息,送到下一个过滤器  UsernamePasswordAuthenticationFilter</span></span><br><span class="line">                    <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authenticationToken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(user,<span class="literal">null</span>,user.getAuthorities());</span><br><span class="line">                    <span class="comment">//将Redis数据库中的信息送到SpringSecurity上下文中</span></span><br><span class="line">                    SecurityContextHolder.getContext().setAuthentication(authenticationToken);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    SecurityContextHolder.getContext().setAuthentication(<span class="literal">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//放行,后面交给Spring Security 框架</span></span><br><span class="line">        filterChain.doFilter(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<blockquote>
<p>第二步</p>
</blockquote>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Spring Security配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LoginUnAuthenticationEntryPointHandler loginUnAuthenticationEntryPointHandler;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 密码加密和解密工具</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">generalPasswordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SpringSecurity过滤器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityFilterChain <span class="title function_">filterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.csrf().disable() <span class="comment">//防止跨站请求伪造</span></span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS) <span class="comment">//取消session</span></span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/login&quot;</span>).permitAll() <span class="comment">//登陆和未登录的人都可以访问访问</span></span><br><span class="line">                .anyRequest().authenticated();<span class="comment">//除了上面设置的地址可以匿名访问,其它所有的请求地址需要认证访问</span></span><br><span class="line">        <span class="comment">//将自定义的过滤器注册到SpringSecurity过滤器链中,并且设置到UsernamePasswordAuthenticationFilter前面</span></span><br><span class="line">        http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">        <span class="comment">//注册自定义的处理器(未认证用户访问需要认证资源的处理器)</span></span><br><span class="line">        http.exceptionHandling().authenticationEntryPoint(loginUnAuthenticationEntryPointHandler);</span><br><span class="line">        <span class="keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SpringSecurity 认证管理器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManager</span><span class="params">(AuthenticationConfiguration authenticationConfiguration)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> authenticationConfiguration.getAuthenticationManager();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<blockquote>
<p>测试验证</p>
</blockquote>
</blockquote>
<img src="https://note.youdao.com/yws/api/personal/file/WEBa463347ed4d8bc7dd73fa695d3b5d24e?method=download&shareKey=8e2d38dd53ae909ffb622215ed97c8ea">

<img src="https://note.youdao.com/yws/api/personal/file/WEB60f80a96212cef1cd24c54d07a496ff2?method=download&shareKey=e66750a274d78a9472d4b6a254cc83e6">

<img src="https://note.youdao.com/yws/api/personal/file/WEBb2274b23d17d30331030fc489e63d159?method=download&shareKey=308289ee4711a4609d66628933b4863f">

<h4 id="3-6-反复登录，多token解决"><a href="#3-6-反复登录，多token解决" class="headerlink" title="3.6 反复登录，多token解决"></a>3.6 反复登录，多token解决</h4><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">客户端发送的所有请求都需要带<span class="built_in">token</span>，在进行登录时单独进行<span class="built_in">token</span>的校验，如果登陆过，刷新<span class="built_in">token</span></span><br><span class="line"></span><br><span class="line">在登录中添加一个校验逻辑，删除原来的<span class="built_in">key</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisClient redisClient;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phone    手机号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 响应结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(String phone, String password, HttpServletRequest request)</span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 登录前判断是否上次的登录未过期,如果未过期直接删除,重新登录生成新token</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token_</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="comment">//判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span>(StringUtils.hasText(token_))&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">claim</span> <span class="operator">=</span> JwtUtils.getClaim(token_);</span><br><span class="line">            <span class="keyword">if</span>(StringUtils.hasText(claim))&#123;</span><br><span class="line">                <span class="comment">//校验是否是同一个账户</span></span><br><span class="line">                <span class="keyword">if</span>(phone.equals(claim))&#123;</span><br><span class="line">                    <span class="comment">//同一个账户,删除原来的登录状态</span></span><br><span class="line">                    String key=<span class="string">&quot;login:token:&quot;</span>+token_;</span><br><span class="line">                    redisClient.del(key);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * SpringSecurity 的认证逻辑</span></span><br><span class="line"><span class="comment">         * 默认情况SpringSecurity内置了登录页面,内置了从页面获取数据,并将其数据送到SpringSecurity上下文的方式</span></span><br><span class="line"><span class="comment">         * 当前前后端分离的逻辑，数据不再从页面获取，所以不能再使用内置逻辑，需要程序员自己实现将数据送到SpringSecurity上下文中</span></span><br><span class="line"><span class="comment">         * 官网地址: https://docs.spring.io/spring-security/reference/5.8/servlet/authentication/passwords/form.html</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//封装用户名(手机号作为用户名)和密码</span></span><br><span class="line">        <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authenticationToken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(phone,password);</span><br><span class="line">        <span class="comment">//调用认证管理中的认证方法，调用后可能出现异常，所以需要try...catch</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Authentication</span> <span class="variable">authenticate</span> <span class="operator">=</span> authenticationManager.authenticate(authenticationToken);</span><br><span class="line">            <span class="comment">//如果认证成功Authentication中就会有用户信息,否则为空</span></span><br><span class="line">            <span class="keyword">if</span>(Objects.isNull(authenticate))&#123;</span><br><span class="line">                <span class="comment">//认证失败</span></span><br><span class="line">                <span class="keyword">return</span> Result.error(<span class="string">&quot;认证失败,用户名或密码错误&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//登录成功将用户信息保存到redis中,以token作为key</span></span><br><span class="line">            <span class="type">LoginUserDetails</span> <span class="variable">principal</span> <span class="operator">=</span> (LoginUserDetails) authenticate.getPrincipal();</span><br><span class="line">            <span class="keyword">if</span>(Objects.isNull(principal))&#123;</span><br><span class="line">                <span class="keyword">return</span> Result.error(<span class="string">&quot;认证失败,用户名或密码错误&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//将用户信息json化</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSONUtil.toJsonStr(principal);</span><br><span class="line">            <span class="comment">//使用token作为redis的key 格式为 login:token</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JwtUtils.sign(principal.getUsername(), <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7L</span>);<span class="comment">//过期时间为7天</span></span><br><span class="line">            <span class="comment">//将用户信息json化后保存到redis中</span></span><br><span class="line">            redisClient.set(<span class="string">&quot;login:token:&quot;</span>+token,json,<span class="number">1000</span>*<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7L</span>); <span class="comment">//过期时间7天</span></span><br><span class="line">            Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            map.put(<span class="string">&quot;token&quot;</span>,token);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(map);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (RuntimeException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">//认证失败</span></span><br><span class="line">            <span class="keyword">return</span> Result.error(<span class="string">&quot;认证失败,用户名或密码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第六章-授权"><a href="#第六章-授权" class="headerlink" title="第六章 授权"></a>第六章 授权</h2><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">授权的意义就是当一个用户登录成功后，此账户本身拥有的权限<span class="punctuation">(</span>例如 当前用户用哪些角色<span class="punctuation">,</span>当前角色都能干什么[删除<span class="string">|更新等])</span></span><br></pre></td></tr></table></figure>

<h3 id="第1节-将权限从数据库送到SpringSecurity上下文"><a href="#第1节-将权限从数据库送到SpringSecurity上下文" class="headerlink" title="第1节 将权限从数据库送到SpringSecurity上下文"></a>第1节 将权限从数据库送到SpringSecurity上下文</h3><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">从数据库中将用户信息送到上下文 在 UserDetailsService接口的实现类中</span><br><span class="line"></span><br><span class="line"><span class="section">实现步骤:</span></span><br><span class="line"><span class="section">第一步: mapper提供查询方法,将用户相关的权限信息查询到封装到UserDetails的对象中</span></span><br><span class="line">	通过用户ID查询角色名称列表</span><br><span class="line">	通过角色ID查询权限名称列表</span><br><span class="line"><span class="section">第二步: 在UserDetailsService中进行封装</span></span><br><span class="line">	在UserDetailsService中调用mapper并且封装传递给 SpringSecurity 上下文，修改UserDetails结构添加属性等</span><br><span class="line"><span class="section">第三步: 在控制器层进行注解控制(配置文件)</span></span><br><span class="line"><span class="section">第四步: 开启注解配置否则不生效</span></span><br><span class="line"><span class="section">第五步: 权限不够的处理器</span></span><br></pre></td></tr></table></figure>

<h4 id="1-1-第一步"><a href="#1-1-第一步" class="headerlink" title="1.1 第一步"></a>1.1 第一步</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户角色关联表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRoleMapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过用户ID查询用户角色列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId 用户ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户角色列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;UserRole&gt; <span class="title function_">getUserRolesByUserId</span><span class="params">(Long userId)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 操作数据库角色表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RoleMapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> roleIds 角色ID列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 角色列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Role&gt; <span class="title function_">batchGetRolesByRoleIds</span><span class="params">(List&lt;Long&gt; roleIds)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 操作数据库角色权限表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RolePermissionMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过角色ID列表查询权限角色权限列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> roleIds 角色IDs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 角色权限列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;RolePermission&gt; <span class="title function_">getRolePermissionsByRoleIds</span><span class="params">(List&lt;Long&gt; roleIds)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 操作数据库权限表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PermissionMapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过权限ID列表查询权限列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> permissionIds 权限ID列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 权限列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Permission&gt; <span class="title function_">batchGetPermissionsByPermissionIds</span><span class="params">(List&lt;Long&gt; permissionIds)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://note.youdao.com/yws/api/personal/file/WEB751a7c03fd4666160a1cdfc6210dfafd?method=download&shareKey=54a49f7fb16d23f43416da470cd81af2">

<h4 id="1-2-第二步"><a href="#1-2-第二步" class="headerlink" title="1.2 第二步"></a>1.2 第二步</h4><blockquote>
<p>UserDetails 修改</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 封装用户信息</span></span><br><span class="line"><span class="comment"> * SpringSecurity规定给他传递的用户信息必须是UserDetails接口的子类实例对象进行封装</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginUserDetails</span> <span class="keyword">implements</span> <span class="title class_">UserDetails</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//角色名称列表，用于授权</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; roleNames;</span><br><span class="line">    <span class="comment">//权限名称列表，用户授权</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; permissionNames;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoginUserDetails</span><span class="params">(User user, List&lt;String&gt; roleNames, List&lt;String&gt; permissionNames)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.user = user;</span><br><span class="line">        <span class="built_in">this</span>.roleNames = roleNames;</span><br><span class="line">        <span class="built_in">this</span>.permissionNames = permissionNames;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 暂时只实现认证,不实现授权,所以这边权限给空集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class="line">        List&lt;GrantedAuthority&gt; authorities = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//添加角色</span></span><br><span class="line">        <span class="keyword">if</span>(!CollectionUtils.isEmpty(roleNames))&#123;</span><br><span class="line">            <span class="comment">//将角色设置到GrantedAuthority中，官网要求角色要加上前缀 ROLE_xxx 区分其它权限</span></span><br><span class="line">            <span class="keyword">for</span> (String roleName : roleNames) &#123;</span><br><span class="line">                authorities.add(<span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(<span class="string">&quot;ROLE_&quot;</span>+roleName));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//添加权限</span></span><br><span class="line">        <span class="keyword">if</span>(!CollectionUtils.isEmpty(permissionNames))&#123;</span><br><span class="line">            <span class="comment">//将权限设置到GrantedAuthority中</span></span><br><span class="line">            <span class="keyword">for</span> (String permissionName : permissionNames) &#123;</span><br><span class="line">                authorities.add(<span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(permissionName));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> authorities;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//装配密码</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user.getPassword();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//装配账户,这里用手机号作为登录账号</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user.getPhone();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//账号是否过期,在数据库中没有设置,给默认值不过期</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//账号是否锁定,在数据库中没有设置,给默认值不锁定</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonLocked</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//密码是否过期,在数据库中没有设置,给默认值不过期</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCredentialsNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//账号是否可用,在数据库中没有设置,给默认值可用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>UserDetailsService修改</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UserDetailsService是Spring Security提供的从数据库获取数据的核心接口</span></span><br><span class="line"><span class="comment"> * 实现 UserDetailsService 重写里面的 loadUserByUsername方法,替换默认从内存中获取用户信息</span></span><br><span class="line"><span class="comment"> * 具体loadUserByUsername方法中的逻辑可以参考InMemoryUserDetailsManager实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserRoleMapper userRoleMapper;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RoleMapper roleMapper;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RolePermissionMapper rolePermissionMapper;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PermissionMapper permissionMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="comment">//通过用户名从数据库中查询用户信息(这个用户名从前端传递过来时可以使用手机号，邮箱或者其他用户账号)</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.getUserByPhone(username);</span><br><span class="line">        <span class="comment">//判断当前账号是否存在</span></span><br><span class="line">        <span class="keyword">if</span>(Objects.isNull(user))&#123;</span><br><span class="line">            <span class="comment">//如果为空，直接抛出异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(username);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 不为空说明数据库中存在,将信息送到SpringSecurity上下文中</span></span><br><span class="line"><span class="comment">         * 参考InMemoryUserDetailsManager类中的loadUserByUsername方法逻辑</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        List&lt;UserRole&gt; userRoles = userRoleMapper.getUserRolesByUserId(user.getUserId());</span><br><span class="line">        <span class="comment">//角色名称列表</span></span><br><span class="line">        List&lt;String&gt; roleNames = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//权限名称列表</span></span><br><span class="line">        List&lt;String&gt; permissionNames = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(!CollectionUtils.isEmpty(userRoles))&#123;</span><br><span class="line">            List&lt;Long&gt; roleIds = userRoles.stream().map(UserRole::getRoleId).collect(Collectors.toList());</span><br><span class="line">            <span class="keyword">if</span>(!CollectionUtils.isEmpty(roleIds))&#123;</span><br><span class="line">                <span class="comment">//查询角色信息</span></span><br><span class="line">                List&lt;Role&gt; roles = roleMapper.batchGetRolesByRoleIds(roleIds);</span><br><span class="line">                <span class="keyword">if</span>(!CollectionUtils.isEmpty(roles))&#123;</span><br><span class="line">                    List&lt;String&gt; roleNameList = roles.stream().map(Role::getRoleName).collect(Collectors.toList());</span><br><span class="line">                    roleNames.addAll(roleNameList);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//查询权限</span></span><br><span class="line">                List&lt;RolePermission&gt; rolePermissions = rolePermissionMapper.getRolePermissionsByRoleIds(roleIds);</span><br><span class="line">                <span class="keyword">if</span>(!CollectionUtils.isEmpty(rolePermissions))&#123;</span><br><span class="line">                    List&lt;Long&gt; permissionIdList = rolePermissions.stream().map(RolePermission::getPermissionId).collect(Collectors.toList());</span><br><span class="line">                    <span class="keyword">if</span>(!CollectionUtils.isEmpty(permissionIdList))&#123;</span><br><span class="line">                        List&lt;Permission&gt; permissions = permissionMapper.batchGetPermissionsByPermissionIds(permissionIdList);</span><br><span class="line">                        <span class="keyword">if</span>(!CollectionUtils.isEmpty(permissions))&#123;</span><br><span class="line">                            List&lt;String&gt; permissionNameList = permissions.stream().map(Permission::getPermissionName).collect(Collectors.toList());</span><br><span class="line">                            <span class="keyword">if</span>(!CollectionUtils.isEmpty(permissionNameList))&#123;</span><br><span class="line">                                permissionNames.addAll(permissionNameList);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LoginUserDetails</span>(user,roleNames,permissionNames);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-3-第三步"><a href="#1-3-第三步" class="headerlink" title="1.3 第三步"></a>1.3 第三步</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在配置文件上添加注解，开启注解校验</span></span><br><span class="line"><span class="comment">//官网地址: https://docs.spring.io/spring-security/reference/5.8/servlet/authorization/method-security.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试控制器</span></span><br><span class="line"><span class="comment"> * 验证SpringSecurity是否生效</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试方法1 -- 游客访问 -- 不登录也可以访问</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/test1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test1...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(<span class="string">&quot;test1...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试方法2 -- 登录后才可以访问</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/test2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test2...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(<span class="string">&quot;test2...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试方法3 -- 登录后，具有admin角色才能访问</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PreAuthorize(value = &quot;hasRole(&#x27;admin&#x27;)&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/test3&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test3...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(<span class="string">&quot;test3...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试方法4 -- 登录后，具有admin或者CEO角色才能访问</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PreAuthorize(value = &quot;hasAnyRole(&#x27;admin&#x27;,&#x27;CEO&#x27;)&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/test4&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test4...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(<span class="string">&quot;test4...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试方法5 -- 登录后，同时具有CTO和CFO角色才能访问</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PreAuthorize(value = &quot;hasRole(&#x27;CTO&#x27;) and hasRole(&#x27;CEO&#x27;)&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/test5&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">test5</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test5...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(<span class="string">&quot;test5...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试方法6 -- 登录后，具有 user:add权限可以访问</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PreAuthorize(value = &quot;hasAuthority(&#x27;user:add&#x27;)&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/test6&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">test6</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test6...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(<span class="string">&quot;test6...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试方法7 -- 登录后，具有 user:add 或者 user:del权限可以访问</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PreAuthorize(value = &quot;hasAnyAuthority(&#x27;user:add&#x27;,&#x27;user:del&#x27;)&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/test7&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">test7</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test7...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(<span class="string">&quot;test7...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试方法8 -- 登录后，具有 user:add 和 user:del权限可以访问</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PreAuthorize(value = &quot;hasAuthority(&#x27;user:add&#x27;) and hasAuthority(&#x27;user:del&#x27;)&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/test8&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">test8</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test8...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(<span class="string">&quot;test8...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-4-第四步"><a href="#1-4-第四步" class="headerlink" title="1.4 第四步"></a>1.4 第四步</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Spring Security配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableMethodSecurity(securedEnabled = true)</span> <span class="comment">//开发方法权限验证</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LoginUnAuthenticationEntryPointHandler loginUnAuthenticationEntryPointHandler;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LoginUnAccessDeniedHandler loginUnAccessDeniedHandler;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 密码加密和解密工具</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">generalPasswordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SpringSecurity过滤器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityFilterChain <span class="title function_">filterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.csrf().disable() <span class="comment">//防止跨站请求伪造</span></span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS) <span class="comment">//取消session</span></span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/login&quot;</span>,<span class="string">&quot;/test1&quot;</span>).permitAll() <span class="comment">//登陆和未登录的人都可以访问访问</span></span><br><span class="line">                .anyRequest().authenticated();<span class="comment">//除了上面设置的地址可以匿名访问,其它所有的请求地址需要认证访问</span></span><br><span class="line">        <span class="comment">//将自定义的过滤器注册到SpringSecurity过滤器链中,并且设置到UsernamePasswordAuthenticationFilter前面</span></span><br><span class="line">        http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">        <span class="comment">//注册自定义的处理器(未认证用户访问需要认证资源的处理器)</span></span><br><span class="line">        http.exceptionHandling().authenticationEntryPoint(loginUnAuthenticationEntryPointHandler);</span><br><span class="line">        <span class="comment">//注册自定义的处理器(认证后的用户访问需要认证资源时因为权限不足走的处理器)</span></span><br><span class="line">        http.exceptionHandling().accessDeniedHandler(loginUnAccessDeniedHandler);</span><br><span class="line">        <span class="keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SpringSecurity 认证管理器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManager</span><span class="params">(AuthenticationConfiguration authenticationConfiguration)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> authenticationConfiguration.getAuthenticationManager();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-5-第五步"><a href="#1-5-第五步" class="headerlink" title="1.5 第五步"></a>1.5 第五步</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果登录成功,使用当前用户进行访问，发现权限不够，报权限错误，定义处理器进行处理</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 权限不足处理器</span></span><br><span class="line"><span class="comment"> * 用户登录成功，访问某一个资源时因为权限不足，报异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginUnAccessDeniedHandler</span> <span class="keyword">implements</span> <span class="title class_">AccessDeniedHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> Result.error(<span class="string">&quot;权限不足,请重新授权。&quot;</span>);</span><br><span class="line">        <span class="comment">//将消息json化</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSONUtil.toJsonStr(result);</span><br><span class="line">        <span class="comment">//送到客户端</span></span><br><span class="line">        response.getWriter().print(json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义权限不足处理器后，需要进行注册，注册到SecurityConfig配置文件中</span></span><br></pre></td></tr></table></figure>

<h2 id="第七章-注销"><a href="#第七章-注销" class="headerlink" title="第七章 注销"></a>第七章 注销</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">注销比较简单,直接将redis数据清空了即可</span><br><span class="line">SpringSecurity内置注销功能,咱们使用内置的注销,覆盖注销的逻辑即可</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注销成功的处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogoutStatusSuccessHandler</span> <span class="keyword">implements</span> <span class="title class_">LogoutSuccessHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisClient redisClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onLogoutSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.hasText(token))&#123;</span><br><span class="line">            redisClient.del(<span class="string">&quot;login:token:&quot;</span>+token);</span><br><span class="line">        &#125;</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> Result.ok(<span class="number">200</span>,<span class="string">&quot;注销成功&quot;</span>);</span><br><span class="line">        <span class="comment">//将消息json化</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSONUtil.toJsonStr(result);</span><br><span class="line">        <span class="comment">//送到客户端</span></span><br><span class="line">        response.getWriter().print(json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Spring Security配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableMethodSecurity(securedEnabled = true)</span> <span class="comment">//开发方法权限验证</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LoginUnAuthenticationEntryPointHandler loginUnAuthenticationEntryPointHandler;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LoginUnAccessDeniedHandler loginUnAccessDeniedHandler;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LogoutStatusSuccessHandler logoutStatusSuccessHandler;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 密码加密和解密工具</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">generalPasswordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SpringSecurity过滤器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityFilterChain <span class="title function_">filterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.csrf().disable() <span class="comment">//防止跨站请求伪造</span></span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS) <span class="comment">//取消session</span></span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/login&quot;</span>,<span class="string">&quot;/logout&quot;</span>,<span class="string">&quot;/test1&quot;</span>).permitAll() <span class="comment">//登陆和未登录的人都可以访问访问</span></span><br><span class="line">                .anyRequest().authenticated();<span class="comment">//除了上面设置的地址可以匿名访问,其它所有的请求地址需要认证访问</span></span><br><span class="line">        <span class="comment">//将自定义的过滤器注册到SpringSecurity过滤器链中,并且设置到UsernamePasswordAuthenticationFilter前面</span></span><br><span class="line">        http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">        <span class="comment">//注册自定义的处理器(未认证用户访问需要认证资源的处理器)</span></span><br><span class="line">        http.exceptionHandling().authenticationEntryPoint(loginUnAuthenticationEntryPointHandler);</span><br><span class="line">        <span class="comment">//注册自定义的处理器(认证后的用户访问需要认证资源时因为权限不足走的处理器)</span></span><br><span class="line">        http.exceptionHandling().accessDeniedHandler(loginUnAccessDeniedHandler);</span><br><span class="line">        <span class="comment">//注册自定义处理器(注销处理器,注销成功后删除redis中的数据)</span></span><br><span class="line">        http.logout().logoutSuccessHandler(logoutStatusSuccessHandler);</span><br><span class="line">        <span class="keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SpringSecurity 认证管理器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManager</span><span class="params">(AuthenticationConfiguration authenticationConfiguration)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> authenticationConfiguration.getAuthenticationManager();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第八章-总结"><a href="#第八章-总结" class="headerlink" title="第八章 总结"></a>第八章 总结</h2><figure class="highlight erlang-repl"><table><tr><td class="code"><pre><span class="line">以上就是SpringSecurity的核心知识点，没什么好总结的，一切从官网出发. 你学废了吗 !!!!</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringSecurity</tag>
        <tag>权限</tag>
        <tag>JWT</tag>
        <tag>认证授权</tag>
        <tag>前后端分离</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA集成Dockerfile连接远程Docker平台一键发布</title>
    <url>/2025/04/25/IntelliJ%20IDEA%E9%9B%86%E6%88%90Dockerfile%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8BDocker%E5%B9%B3%E5%8F%B0%E4%B8%80%E9%94%AE%E5%8F%91%E5%B8%83/</url>
    <content><![CDATA[<figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line"><span class="attribute">作者</span><span class="punctuation">:</span> <span class="string">夜泊1990</span></span><br><span class="line"><span class="attribute">企鹅</span><span class="punctuation">:</span> <span class="string">1611756908</span></span><br><span class="line"><span class="attribute">Q 群</span><span class="punctuation">:</span> <span class="string">948233848</span></span><br><span class="line"><span class="attribute">邮箱</span><span class="punctuation">:</span> <span class="string">hd1611756908@163.com</span></span><br><span class="line"><span class="attribute">博客</span><span class="punctuation">:</span> <span class="string">https://hs-an-yue.github.io/</span></span><br><span class="line"><span class="attribute">B 站</span><span class="punctuation">:</span> <span class="string">https://space.bilibili.com/514155929/</span></span><br></pre></td></tr></table></figure>

<hr>
<span id="more"></span>

<h2 id="第一章-一键发布介绍"><a href="#第一章-一键发布介绍" class="headerlink" title="第一章 一键发布介绍"></a>第一章 一键发布介绍</h2><h3 id="第1节-看图"><a href="#第1节-看图" class="headerlink" title="第1节 看图"></a>第1节 看图</h3><img src="https://note.youdao.com/yws/api/personal/file/WEB03bada513268ed8464b560de4f2d8405?method=download&shareKey=848a6e665ac67061b0416fa7095df260">



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1. IDEA 提供了Docker一键发布的功能</span><br><span class="line">2. 上图中是通过Dockerfile加上IDEA自带的Docker插件功能可以实现一键将本地的项目发布到远程的Docker平台</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注意: 本地要安装 IntelliJ IDEA 开发工具,远程服务器使用Docker平台进行应用发布和管理</span><br></pre></td></tr></table></figure>



<h2 id="第二章-IntelliJ-IDEA配置"><a href="#第二章-IntelliJ-IDEA配置" class="headerlink" title="第二章 IntelliJ IDEA配置"></a>第二章 IntelliJ IDEA配置</h2><h3 id="第一步-打开IDEA开发工具-安装Docker插件"><a href="#第一步-打开IDEA开发工具-安装Docker插件" class="headerlink" title="第一步: 打开IDEA开发工具,安装Docker插件"></a>第一步: 打开IDEA开发工具,安装Docker插件</h3><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">我使用的开发工具为 IntelliJ IDEA <span class="number">2023.2</span> (Ultimate Edition) 下面以此软件作为演示</span><br><span class="line"></span><br><span class="line">下面看安装Docker插件的步骤</span><br></pre></td></tr></table></figure>



<img src="https://note.youdao.com/yws/api/personal/file/WEBf9f41963a35b9f0af777ea230f417fc7?method=download&shareKey=b291b289ab63e1204856b31053a7542a">



<img src="https://note.youdao.com/yws/api/personal/file/WEBc71d01b3e1eca12d1ae2ffa4e733503a?method=download&shareKey=1f9166861195361202b813e2b9a40972">



<img src="https://note.youdao.com/yws/api/personal/file/WEB5a149693be36820999589920e69f0ccd?method=download&shareKey=a54617626018a2da088fbc022c438285">



<h3 id="第二步-找一个需要发布到Docker平台的项目-创建Dockerfile文件"><a href="#第二步-找一个需要发布到Docker平台的项目-创建Dockerfile文件" class="headerlink" title="第二步: 找一个需要发布到Docker平台的项目,创建Dockerfile文件"></a>第二步: 找一个需要发布到Docker平台的项目,创建Dockerfile文件</h3><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">我这里以一个Java项目为例,在项目的根目录创建一个Dockerfile文件,在Dockerfile文件中编写命令,写哪些命令,请自行脑补.</span><br></pre></td></tr></table></figure>



<img src="https://note.youdao.com/yws/api/personal/file/WEB944e61d7e0578b781f31bc22103289f0?method=download&shareKey=22c2e5995edaba5779f3aa6b3c7dd692">



<img src="https://note.youdao.com/yws/api/personal/file/WEB32b013e2cdc8e0f2ab7eb3c32b5a0f23?method=download&shareKey=132bfa2825cf9c232b5a526644f5fca0">



<h3 id="第三步-配置IDEA中的Docker"><a href="#第三步-配置IDEA中的Docker" class="headerlink" title="第三步: 配置IDEA中的Docker"></a>第三步: 配置IDEA中的Docker</h3><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">配置步骤如下:</span></span><br></pre></td></tr></table></figure>



<img src="https://note.youdao.com/yws/api/personal/file/WEB659109d0df56368c589b21222467136a?method=download&shareKey=c6c81d7982835ed287bcbb5d2ee4c251">



<img src="https://note.youdao.com/yws/api/personal/file/WEB7f52eb90d8e9dc31a2f4f2168cfda18f?method=download&shareKey=f85e6d01185df035f1346a0d15c1c5d1">



<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">IDEA连接远程的Docker服务器会出现失败的情况,原因是远程Docker服务器没有开放<span class="number">2375</span>端口号的连接,所以去Docker服务器端进行配置</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">配置步骤:</span><br><span class="line"></span><br><span class="line">第一步: 找到配置文件</span><br><span class="line">	<span class="number">1</span>. 配置文件在Linux服务器的位置 <span class="regexp">/usr/</span>lib<span class="regexp">/systemd/</span>system/docker.service</span><br><span class="line">	<span class="number">2</span>. 通过 vim <span class="regexp">/usr/</span>lib<span class="regexp">/systemd/</span>system/docker.service  编辑文件</span><br><span class="line">	<span class="number">3</span>. 在docker.service文件中找到 以 ExecStart=<span class="regexp">/usr/</span>bin<span class="regexp">/dockerd开头的行,在后面添加 -H tcp:/</span>/<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">2375</span> 修改之后如下,可能因为版本不同,此行内容略有区别,但是差距不大</span><br><span class="line">	<span class="number">4</span>. 修改后: ExecStart=<span class="regexp">/usr/</span>bin<span class="regexp">/dockerd -H tcp:/</span><span class="regexp">/0.0.0.0:2375  -H fd:/</span><span class="regexp">/ --containerd=/</span>run<span class="regexp">/containerd/</span>containerd.sock</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">文件演示如下:</span><br></pre></td></tr></table></figure>



<img src="https://note.youdao.com/yws/api/personal/file/WEBbaf20009679c42ea3751679eff76b605?method=download&shareKey=db02979b18ab1cd4aa754c25e659bdab">



<img src="https://note.youdao.com/yws/api/personal/file/WEB3bb6417c017af2144c2a088285659497?method=download&shareKey=1257735099862fc6b48ce8ad831d235a">



<img src="https://note.youdao.com/yws/api/personal/file/WEB5a41a6728bae4c196ea935e38bb75a00?method=download&shareKey=4acff9493c53c479833def3be311e9d1">



<img src="https://note.youdao.com/yws/api/personal/file/WEBe715862817b374f457e803baafce5225?method=download&shareKey=9c567066fb955f3d0ef38e2d6833123e">

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">下方有日志,可以通过日志查看是否发布成功</span><br></pre></td></tr></table></figure>

<img src="https://note.youdao.com/yws/api/personal/file/WEB21666a2058a31f3bf845da9ee535623f?method=download&shareKey=5dcb9caab51559ce0822393afe9822cb">

<h2 id="第三章-控制面板使用"><a href="#第三章-控制面板使用" class="headerlink" title="第三章 控制面板使用"></a>第三章 控制面板使用</h2><figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">上图中IDEA左下角有一个操作容器和镜像的控制面板<span class="punctuation">,</span>这个控制面板可以控制远程的Docker平台的镜像和容器</span><br><span class="line"></span><br><span class="line">当然也有第三方的控制面板使用</span><br><span class="line"></span><br><span class="line">在前面的博客中  https://hs-an-yue.github.io/<span class="number">2024</span>/<span class="number">08</span>/<span class="number">03</span>/Docker<span class="variable">%E7</span><span class="variable">%9</span>A<span class="variable">%84</span><span class="variable">%E5</span><span class="variable">%B8</span><span class="variable">%B8</span><span class="variable">%E7</span><span class="variable">%94</span><span class="variable">%A8</span><span class="variable">%E5</span><span class="variable">%91</span><span class="variable">%BD</span><span class="variable">%E4</span><span class="variable">%BB</span><span class="variable">%A4</span><span class="variable">%E4</span><span class="variable">%BB</span><span class="variable">%A5</span><span class="variable">%E5</span><span class="variable">%8</span>F<span class="variable">%8</span>A<span class="variable">%E4</span><span class="variable">%BD</span><span class="variable">%BF</span><span class="variable">%E7</span><span class="variable">%94</span><span class="variable">%A8</span>/#<span class="variable">%E7</span><span class="variable">%AC</span><span class="variable">%AC4</span><span class="variable">%E8</span><span class="variable">%8</span>A<span class="variable">%82</span>-Docker<span class="variable">%E6</span><span class="variable">%8</span>E<span class="variable">%A7</span><span class="variable">%E5</span><span class="variable">%88</span><span class="variable">%B6</span><span class="variable">%E9</span><span class="variable">%9</span>D<span class="variable">%A2</span><span class="variable">%E6</span><span class="variable">%9</span>D<span class="variable">%BF</span><span class="variable">%E5</span><span class="variable">%AE</span><span class="variable">%89</span><span class="variable">%E8</span><span class="variable">%A3</span><span class="variable">%85</span></span><br><span class="line"></span><br><span class="line">也介绍了一个控制面板<span class="punctuation">,</span>大家可以自行去看一下</span><br></pre></td></tr></table></figure>



<img src="https://note.youdao.com/yws/api/personal/file/WEB1e2badb7b02cd7b8535cc3db899eb3dc?method=download&shareKey=d4a36245255d7933cef34081bfa7c0a3">



<img src="https://note.youdao.com/yws/api/personal/file/WEB63b349cb3e08fd2f0c54690f434b2781?method=download&shareKey=44732a5eeb2d6890ab9e1340937e10a0">



<img src="https://note.youdao.com/yws/api/personal/file/WEBc8bf5e6a97793ff8155981b58223a398?method=download&shareKey=0d0a44297fe237908e47586737f87ed4">



<hr>
]]></content>
      <categories>
        <category>Linux(运维)</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>镜像</tag>
        <tag>控制面板</tag>
        <tag>IntelliJ IDEA</tag>
        <tag>Dockerfile</tag>
        <tag>运维</tag>
        <tag>一键发布</tag>
      </tags>
  </entry>
  <entry>
    <title>网站内文件存储-快速入门</title>
    <url>/2025/04/25/%E7%BD%91%E7%AB%99%E5%86%85%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line"><span class="attribute">作者</span><span class="punctuation">:</span> <span class="string">夜泊1990</span></span><br><span class="line"><span class="attribute">企鹅</span><span class="punctuation">:</span> <span class="string">1611756908</span></span><br><span class="line"><span class="attribute">Q 群</span><span class="punctuation">:</span> <span class="string">948233848</span></span><br><span class="line"><span class="attribute">邮箱</span><span class="punctuation">:</span> <span class="string">hd1611756908@163.com</span></span><br><span class="line"><span class="attribute">博客</span><span class="punctuation">:</span> <span class="string">https://hs-an-yue.github.io/</span></span><br><span class="line"><span class="attribute">B 站</span><span class="punctuation">:</span> <span class="string">https://space.bilibili.com/514155929/</span></span><br></pre></td></tr></table></figure>

<hr>
<span id="more"></span>
<h2 id="第一章-什么是文件存储"><a href="#第一章-什么是文件存储" class="headerlink" title="第一章 什么是文件存储"></a>第一章 什么是文件存储</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">在网络上存在各种各样的资源</span></span><br><span class="line"><span class="number">1</span><span class="string">.</span> <span class="string">文本资源</span> <span class="string">.txt</span> <span class="string">.html</span> <span class="string">用户信息(用户名、密码、性别、年龄...)</span></span><br><span class="line"><span class="number">2</span><span class="string">.</span> <span class="string">多媒体资源</span></span><br><span class="line">	<span class="number">2.1</span> <span class="string">Excel、Word、PPT、PDF等</span></span><br><span class="line">	<span class="number">2.2</span> <span class="string">音频(mp3</span> <span class="string">...)</span></span><br><span class="line">	<span class="number">2.3</span> <span class="string">视频(mp4</span> <span class="string">...)</span></span><br><span class="line">	<span class="number">2.4</span> <span class="string">图片</span></span><br><span class="line"></span><br><span class="line"><span class="string">以上这些数据按照分类需要保存到不同的数据库中</span></span><br><span class="line">	<span class="number">1</span><span class="string">.</span> <span class="string">数据库</span></span><br><span class="line">		<span class="number">1.1</span> <span class="string">关系型数据库</span></span><br><span class="line">		<span class="number">1.2</span> <span class="string">非关系型数据库</span></span><br><span class="line">		<span class="number">1.3</span> <span class="string">向量数据库</span></span><br><span class="line">			<span class="string">...</span></span><br><span class="line">	<span class="number">2</span><span class="string">.</span> <span class="string">文件服务器（存储大文件）</span></span><br><span class="line">		<span class="string">...</span></span><br></pre></td></tr></table></figure>

<h2 id="第二章-文件存储的实现方式"><a href="#第二章-文件存储的实现方式" class="headerlink" title="第二章 文件存储的实现方式"></a>第二章 文件存储的实现方式</h2><h3 id="第1节-方式一-基于SpringBoot应用存储"><a href="#第1节-方式一-基于SpringBoot应用存储" class="headerlink" title="第1节 方式一 基于SpringBoot应用存储"></a>第1节 方式一 基于SpringBoot应用存储</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">如果项目较小，存储的文件不是很多，并且多以图片或者小的文本文件为主，并且不涉及到敏感图片，这是可以采用方式一，简单方便。</span></span><br><span class="line"></span><br><span class="line"><span class="string">实现方式非常简单,步骤如下</span> <span class="string">↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br></pre></td></tr></table></figure>

<h4 id="第1步-创建一个基于Springboot的Web项目"><a href="#第1步-创建一个基于Springboot的Web项目" class="headerlink" title="第1步 创建一个基于Springboot的Web项目"></a>第1步 创建一个基于Springboot的Web项目</h4><img src="https://note.youdao.com/yws/api/personal/file/WEB210316c2efffd2ee57f883fbcd9a5d36?method=download&shareKey=0a6dfdf18008883fd5ad46c4e206f72f">

<h4 id="第2步-配置SpringBoot的静态资源管理"><a href="#第2步-配置SpringBoot的静态资源管理" class="headerlink" title="第2步 配置SpringBoot的静态资源管理"></a>第2步 配置SpringBoot的静态资源管理</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">static-locations:</span> <span class="string">classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/,file:d:/file/</span></span><br></pre></td></tr></table></figure>

<img src="https://note.youdao.com/yws/api/personal/file/WEB81ff93f1e6931087d37c838b2e588a79?method=download&shareKey=4b86a3fa331d9b59b9952e474a4eb6d3">

<h4 id="第3步-测试"><a href="#第3步-测试" class="headerlink" title="第3步 测试"></a>第3步 测试</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">按照第2步</span> <span class="string">在d盘(可以设置本地硬盘的任意位置)创建一个file文件夹,并且在此文件夹中放一张图片用于测试，如下所以:</span></span><br></pre></td></tr></table></figure>

<img src="https://note.youdao.com/yws/api/personal/file/WEB1bf0da9f04a59cd1834095f508258c1d?method=download&shareKey=c34a0c919e170a2c07de9dfb9db829dc">

<h4 id="第4步-启动项目并测试"><a href="#第4步-启动项目并测试" class="headerlink" title="第4步 启动项目并测试"></a>第4步 启动项目并测试</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 启动项目</span><br><span class="line"><span class="bullet">2.</span> 在浏览器中输入 服务器地址+文件名 例如: </span><br></pre></td></tr></table></figure>

<h4 id="第5步-测试完成后-编写API将文件操作接口暴露给用户使用"><a href="#第5步-测试完成后-编写API将文件操作接口暴露给用户使用" class="headerlink" title="第5步 测试完成后,编写API将文件操作接口暴露给用户使用"></a>第5步 测试完成后,编写API将文件操作接口暴露给用户使用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 设计数据库表</span></span><br><span class="line">-- 创建库</span><br><span class="line">CREATE DATABASE db_file DEFAULT CHARACTER SET utf8;</span><br><span class="line">-- 文件表</span><br><span class="line">CREATE TABLE <span class="title function_">sys_file</span><span class="params">(</span></span><br><span class="line"><span class="params">    file_id BIGINT PRIMARY KEY AUTO_INCREMENT COMMENT <span class="string">&#x27;文件ID,主键自增&#x27;</span>,</span></span><br><span class="line"><span class="params">    file_name VARCHAR(<span class="number">255</span>)</span> NOT NULL COMMENT <span class="string">&#x27;文件名称&#x27;</span>,</span><br><span class="line">    file_url <span class="title function_">VARCHAR</span><span class="params">(<span class="number">255</span>)</span> NOT NULL COMMENT <span class="string">&#x27;文件服务器地址&#x27;</span>,</span><br><span class="line">    file_address <span class="title function_">VARCHAR</span><span class="params">(<span class="number">255</span>)</span> NOT NULL COMMENT <span class="string">&#x27;文件本地硬盘的真实地址&#x27;</span>,</span><br><span class="line">    suffix <span class="title function_">VARCHAR</span><span class="params">(<span class="number">100</span>)</span> COMMENT <span class="string">&#x27;文件格式 pdf xlsx zip ppt docx等&#x27;</span>,</span><br><span class="line">    size BIGINT DEFAULT <span class="number">0</span> COMMENT <span class="string">&#x27;文件大小&#x27;</span>,</span><br><span class="line">    create_time DATETIME NOT NULL COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    update_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT <span class="string">&#x27;设置当前时间，并且自动更更新时间&#x27;</span></span><br><span class="line">)DEFAULT CHARSET=<span class="string">&#x27;UTF8&#x27;</span> AUTO_INCREMENT=<span class="number">1000</span> COMMENT=<span class="string">&#x27;文件表&#x27;</span>;</span><br><span class="line"><span class="comment">//2. 其它操作略</span></span><br></pre></td></tr></table></figure>

<h3 id="第2节-方式二-基于minio文件服务器存储"><a href="#第2节-方式二-基于minio文件服务器存储" class="headerlink" title="第2节 方式二 基于minio文件服务器存储"></a>第2节 方式二 基于minio文件服务器存储</h3><h4 id="第1步-minio官网"><a href="#第1步-minio官网" class="headerlink" title="第1步 minio官网"></a>第1步 minio官网</h4><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">https:</span>//www.minio<span class="meta">.org</span>.cn/</span><br></pre></td></tr></table></figure>

<h4 id="第2步-minio安装"><a href="#第2步-minio安装" class="headerlink" title="第2步 minio安装"></a>第2步 minio安装</h4><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line">本练习通过<span class="type">Docker</span>容器化平台进行minio的安装: minio支持<span class="type">Podman</span>和<span class="type">Docker</span>两种方式，我这里采用<span class="type">Docker</span>方式</span><br><span class="line">安装地址: https://www.minio.org.cn/docs/minio/container/index.html</span><br><span class="line"></span><br><span class="line">第一步: 创建数据库的保存目录 命令为: mkdir -p ~/minio/<span class="class"><span class="keyword">data</span></span></span><br><span class="line">第二步: 运行docker命令,命令如下:   (注意:需要自己安装<span class="type">Docker</span>平台)</span><br><span class="line">	docker run \</span><br><span class="line">       -p <span class="number">9000</span>:<span class="number">9000</span> \</span><br><span class="line">       -p <span class="number">9001</span>:<span class="number">9001</span> \</span><br><span class="line">       <span class="comment">--name minio \</span></span><br><span class="line">       -d <span class="comment">--restart=always \</span></span><br><span class="line">       -v ~/minio/<span class="class"><span class="keyword">data</span>:/<span class="keyword">data</span> \</span></span><br><span class="line">       -e <span class="string">&quot;MINIO_ROOT_USER=minio&quot;</span> \</span><br><span class="line">       -e <span class="string">&quot;MINIO_ROOT_PASSWORD=minio123&quot;</span> \</span><br><span class="line">       quay.io/minio/minio server /<span class="class"><span class="keyword">data</span> <span class="comment">--console-address &quot;:9001&quot;</span></span></span><br><span class="line">第三步: 访问和测试</span><br><span class="line">	<span class="number">1</span>. 访问地址: http://<span class="number">192.168</span>.<span class="number">206.129</span>:<span class="number">9001</span>/</span><br><span class="line">	<span class="number">2</span>. 用户名和而密码: minio/minio123    在进行第一次启动时设置用户名和密码(用户名长度至少<span class="number">5</span>位，密码至少<span class="number">8</span>位)</span><br><span class="line">	<span class="number">3</span>. 登录上去后进入minio控制台页面</span><br></pre></td></tr></table></figure>

<h4 id="第3步-minio的API操作-Java版"><a href="#第3步-minio的API操作-Java版" class="headerlink" title="第3步 minio的API操作(Java版)"></a>第3步 minio的API操作(Java版)</h4><blockquote>
<p>Maven依赖</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.minio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>minio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.5.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>功能介绍</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">.</span> <span class="string">文件上传</span></span><br><span class="line"><span class="number">2</span><span class="string">.</span> <span class="string">文件删除</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>集成SpringBoot对外提供API接口案例</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">第一步: 在minio操作页面创建一个用户(给读写权限)，并且在创建accessKey和securityKey</span><br><span class="line">第二步: 创建SpringBoot项目添加minio依赖</span><br><span class="line">第三步: 在SpringBoot配置minio服务器 application.yml</span><br><span class="line">    minio:</span><br><span class="line">      # minio账户的access</span><br><span class="line">      access_key: s9Aev3pEpCqKaaoMuanY</span><br><span class="line">      # minio账户的security</span><br><span class="line">      security_key: mvsXMUYHq44GQkZERtbzzspYu1iULIvGsZynwC80</span><br><span class="line">      # 服务器地址</span><br><span class="line">      endpoint: http:<span class="comment">//192.168.206.129:9000/</span></span><br><span class="line">      # 创建桶，用来装文件(可以在minio页面创建，并且分配权限,默认私有)</span><br><span class="line">      bucketName: test</span><br><span class="line">第四步: 创建minio客户端</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> io.minio.MinioClient;</span><br><span class="line">    <span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line">    <span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line">    <span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinioConfig</span> &#123;</span><br><span class="line">        <span class="meta">@Value(&quot;$&#123;minio.endpoint&#125;&quot;)</span></span><br><span class="line">        <span class="keyword">private</span> String endpoint;</span><br><span class="line">        <span class="meta">@Value(&quot;$&#123;minio.access_key&#125;&quot;)</span></span><br><span class="line">        <span class="keyword">private</span> String accessKey;</span><br><span class="line">        <span class="meta">@Value(&quot;$&#123;minio.security_key&#125;&quot;)</span></span><br><span class="line">        <span class="keyword">private</span> String secretKey;</span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span> MinioClient <span class="title function_">createMinioClient</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> MinioClient.builder().endpoint(endpoint).credentials(accessKey, secretKey).build();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">第五步: 上传和删除代码实现</span><br><span class="line">	<span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MinioClient minioClient;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.bucketName&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String bucketName;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.endpoint&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String endpoint;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/deleteFile&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">deleteFile</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        minioClient.removeObject(RemoveObjectArgs.builder()</span><br><span class="line">                        .bucket(bucketName)</span><br><span class="line">                        .object(fileName)</span><br><span class="line">                .build());</span><br><span class="line">        <span class="keyword">return</span> Map.of(<span class="string">&quot;code&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/uploadFile&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">uploadFile</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//创建桶</span></span><br><span class="line">        createBucket(minioClient,bucketName);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//文件上传</span></span><br><span class="line">            minioClient.putObject(PutObjectArgs.builder().</span><br><span class="line">                    bucket(bucketName)</span><br><span class="line">                    .object(file.getOriginalFilename())</span><br><span class="line">                            .stream(file.getInputStream(), file.getSize(), -<span class="number">1</span>)</span><br><span class="line">                            .contentType(file.getContentType())</span><br><span class="line">                    .build());</span><br><span class="line">            <span class="keyword">return</span> Map.of(<span class="string">&quot;code&quot;</span>,<span class="number">0</span>,<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;success&quot;</span>,<span class="string">&quot;data&quot;</span>,endpoint+bucketName+<span class="string">&quot;/&quot;</span>+file.getOriginalFilename());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Map.of(<span class="string">&quot;code&quot;</span>,<span class="number">0</span>,<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建桶</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> minioClient minio客户端</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName  桶名字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception  异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createBucket</span><span class="params">(MinioClient minioClient, String bucketName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">found</span> <span class="operator">=</span> minioClient.bucketExists(BucketExistsArgs.builder().bucket(bucketName).build());</span><br><span class="line">        <span class="keyword">if</span> (!found) &#123;</span><br><span class="line">            minioClient.makeBucket(MakeBucketArgs.builder().bucket(bucketName).build());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Bucket &quot;</span> + bucketName + <span class="string">&quot; already exists.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br></pre></td></tr></table></figure>

<blockquote>
<p>已完成…</p>
</blockquote>
]]></content>
      <categories>
        <category>文件服务器</category>
      </categories>
      <tags>
        <tag>文件服务器</tag>
        <tag>SpringBoot</tag>
        <tag>file</tag>
        <tag>SQL</tag>
        <tag>文件管理</tag>
      </tags>
  </entry>
  <entry>
    <title>网站基础架构实现-小小架构入门</title>
    <url>/2025/04/25/%E7%BD%91%E7%AB%99%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E5%AE%9E%E7%8E%B0-%E5%B0%8F%E5%B0%8F%E6%9E%B6%E6%9E%84%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line"><span class="attribute">作者</span><span class="punctuation">:</span> <span class="string">夜泊1990</span></span><br><span class="line"><span class="attribute">企鹅</span><span class="punctuation">:</span> <span class="string">1611756908</span></span><br><span class="line"><span class="attribute">Q 群</span><span class="punctuation">:</span> <span class="string">948233848</span></span><br><span class="line"><span class="attribute">邮箱</span><span class="punctuation">:</span> <span class="string">hd1611756908@163.com</span></span><br><span class="line"><span class="attribute">博客</span><span class="punctuation">:</span> <span class="string">https://hs-an-yue.github.io/</span></span><br><span class="line"><span class="attribute">B 站</span><span class="punctuation">:</span> <span class="string">https://space.bilibili.com/514155929/</span></span><br></pre></td></tr></table></figure>

<hr>
<span id="more"></span>

<h2 id="第一章-我理解的架构"><a href="#第一章-我理解的架构" class="headerlink" title="第一章 我理解的架构"></a>第一章 我理解的架构</h2><h3 id="第1节-架构是什么"><a href="#第1节-架构是什么" class="headerlink" title="第1节 架构是什么"></a>第1节 架构是什么</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">架构是一个软件的基础，后期所有的业务都要建立在此架构基础之上，而架构是为了后期业务服务。</span><br></pre></td></tr></table></figure>

<h3 id="第2节-架构设计是为了什么"><a href="#第2节-架构设计是为了什么" class="headerlink" title="第2节 架构设计是为了什么"></a>第2节 架构设计是为了什么</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">软件随着用户量的增长和功能的多样性会变得越来越复杂，一个好的软件架构可以很好的实现横向扩展</span><br><span class="line"><span class="bullet">	1.</span> 业务上的扩展</span><br><span class="line"><span class="bullet">	2.</span> 容量上的扩展</span><br><span class="line">架构设计不合理就会局限软件的发展(业务扩展和容量扩展)，还会增加开发和运维成本。</span><br></pre></td></tr></table></figure>

<h2 id="第二章-架构的发展"><a href="#第二章-架构的发展" class="headerlink" title="第二章 架构的发展"></a>第二章 架构的发展</h2><h3 id="第1节-架构发展"><a href="#第1节-架构发展" class="headerlink" title="第1节 架构发展"></a>第1节 架构发展</h3><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">架构发展</span></span><br><span class="line"></span><br><span class="line"><span class="comment">单点架构</span>  <span class="literal">--</span>  <span class="comment">分布式架构</span>  <span class="literal">--</span> <span class="comment">云计算</span> <span class="literal">--</span> <span class="string">.</span><span class="string">.</span><span class="string">.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">1</span><span class="string">.</span> <span class="comment">可扩展架构(前后端分离)			</span></span><br><span class="line"><span class="comment">2</span><span class="string">.</span> <span class="comment">难扩展架构(前后端不分离)</span></span><br></pre></td></tr></table></figure>

<h3 id="第2节-分布式和集群思考"><a href="#第2节-分布式和集群思考" class="headerlink" title="第2节 分布式和集群思考"></a>第2节 分布式和集群思考</h3><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">分布式概念 : 一拆多称之为分布式<span class="comment">(一个复杂的应用服务拆成多个不相同的单体服务)</span></span><br><span class="line">集群概念: 相同的服务放在一起称之为集群<span class="comment">(MYSQL集群，Redis集群等)</span></span><br></pre></td></tr></table></figure>

<img src="https://note.youdao.com/yws/api/personal/file/WEBfdac6a6e5717d77749b8f13edffa757f?method=download&shareKey=97ba789aeb2b4f3f4ba4238004c40d2e">

<h2 id="第三章-单点架构的思考"><a href="#第三章-单点架构的思考" class="headerlink" title="第三章 单点架构的思考"></a>第三章 单点架构的思考</h2><figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line"><span class="attribute">单点架构也可以扛起高并发，高并发的软件也是由一个个单体应用撑起的，很多公司采用分布式架构设计是不明智的.</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">单点</span></span><br><span class="line"><span class="attribute">	优点</span><span class="punctuation">:</span> <span class="string">结构简单，开发和运维成本低</span></span><br><span class="line">	<span class="attribute">缺点</span><span class="punctuation">:</span> <span class="string">不能抗住很高的并发，但是不是不能抗住大量用户访问</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">分布式</span></span><br><span class="line"><span class="attribute">	优点</span><span class="punctuation">:</span> <span class="string">容量大，扩展能力强，拆分合理的话，单体系统简单</span></span><br><span class="line">	<span class="attribute">缺点</span><span class="punctuation">:</span> <span class="string">架构复杂，开发和运维成本高，程序员技术参差不齐容易出现一些深度BUG不易维护</span></span><br></pre></td></tr></table></figure>

<h3 id="第1节-确定架构"><a href="#第1节-确定架构" class="headerlink" title="第1节 确定架构"></a>第1节 确定架构</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">单点架构</span><br><span class="line"><span class="bullet">	1.</span> 前后端不分离</span><br><span class="line"><span class="bullet">	2.</span> 前后端分离    ---  方便后期扩展</span><br></pre></td></tr></table></figure>

<h3 id="第2节-确定技术"><a href="#第2节-确定技术" class="headerlink" title="第2节 确定技术"></a>第2节 确定技术</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">基于SpringBoot2.7.x的单点前后端分离项目(只有后端)</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> SpringBoot2.7.6 基础框架</span><br><span class="line"><span class="bullet">2.</span> MySQL8.x        数据库</span><br><span class="line"><span class="bullet">3.</span> MyBatis		   持久层</span><br><span class="line"><span class="bullet">4.</span> knife4j4.4.0    在线API文档</span><br><span class="line"><span class="bullet">5.</span> jwt4.4.0		   JWT token管理工具</span><br><span class="line"><span class="bullet">6.</span> SpringSecurity  权限管理</span><br><span class="line"><span class="bullet">7.</span> Druid		   数据库连接池</span><br></pre></td></tr></table></figure>

<h2 id="第四章-单点基础架构实现"><a href="#第四章-单点基础架构实现" class="headerlink" title="第四章 单点基础架构实现"></a>第四章 单点基础架构实现</h2><h3 id="第1节-创建项目添加依赖"><a href="#第1节-创建项目添加依赖" class="headerlink" title="第1节 创建项目添加依赖"></a>第1节 创建项目添加依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">创建项目 略</span><br><span class="line">注意: 使用阿里巴巴项目创建脚手架，Spring官方脚手架创建不出基于JDK8的SpringBoot项目</span><br><span class="line">脚手架地址: https://start.aliyun.com/</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-boot.version</span>&gt;</span>2.7.6<span class="tag">&lt;/<span class="name">spring-boot.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hutool.version</span>&gt;</span>5.8.26<span class="tag">&lt;/<span class="name">hutool.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">knife4j.version</span>&gt;</span>4.4.0<span class="tag">&lt;/<span class="name">knife4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">easyexcel.version</span>&gt;</span>4.0.2<span class="tag">&lt;/<span class="name">easyexcel.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pagehelper.version</span>&gt;</span>1.4.7<span class="tag">&lt;/<span class="name">pagehelper.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jwt.version</span>&gt;</span>4.4.0<span class="tag">&lt;/<span class="name">jwt.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jthinking.version</span>&gt;</span>2.1.7<span class="tag">&lt;/<span class="name">jthinking.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;pagehelper.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;easyexcel.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 离线IP地址定位 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jthinking.common<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ip-info<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jthinking.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hutool.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jwt.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-openapi3-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;knife4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="第2节-基础数据库表设计"><a href="#第2节-基础数据库表设计" class="headerlink" title="第2节 基础数据库表设计"></a>第2节 基础数据库表设计</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 采用基于RBAC的权限,所以下面除了部门表,其他的表都是设计权限的表</span></span><br><span class="line"><span class="comment">-- 部门表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> sys_department(</span><br><span class="line">    dept_id     <span class="type">INT</span>             <span class="keyword">PRIMARY</span> KEY     AUTO_INCREMENT  COMMENT <span class="string">&#x27;部门ID,主键自增&#x27;</span>,</span><br><span class="line">    dept_name   <span class="type">VARCHAR</span>(<span class="number">100</span>)    <span class="keyword">NOT</span> <span class="keyword">NULL</span>                        COMMENT <span class="string">&#x27;部门名称&#x27;</span>,</span><br><span class="line">    parent_id   <span class="type">INT</span>             <span class="keyword">NOT</span> <span class="keyword">NULL</span>        <span class="keyword">DEFAULT</span> <span class="number">0</span>       COMMENT <span class="string">&#x27;父级ID,顶层为0,自关联部门主键&#x27;</span>,</span><br><span class="line">    ancestors   <span class="type">VARCHAR</span>(<span class="number">100</span>)    <span class="keyword">NOT</span> <span class="keyword">NULL</span>                        COMMENT <span class="string">&#x27;当前部门的祖级列表 例:0,100 0和100都是当前部门的祖级&#x27;</span>,</span><br><span class="line">    status      <span class="type">INT</span>             <span class="keyword">DEFAULT</span> <span class="number">1</span>                       COMMENT <span class="string">&#x27;部门状态 1: 可用 0:禁用&#x27;</span>,</span><br><span class="line">    is_delete   <span class="type">INT</span>             <span class="keyword">DEFAULT</span> <span class="number">0</span>                       COMMENT <span class="string">&#x27;是否删除 1:删除 0:未删除&#x27;</span>,</span><br><span class="line">    create_time DATETIME                                        COMMENT <span class="string">&#x27;数据创建时间&#x27;</span>,</span><br><span class="line">    update_time <span class="type">TIMESTAMP</span>       <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span></span><br><span class="line">)<span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span><span class="string">&#x27;UTF8&#x27;</span> AUTO_INCREMENT<span class="operator">=</span><span class="number">10000</span> COMMENT<span class="operator">=</span><span class="string">&#x27;部门表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用户表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> sys_user(</span><br><span class="line">    user_id 	<span class="type">BIGINT</span> 		<span class="keyword">PRIMARY</span> KEY 	AUTO_INCREMENT 	COMMENT <span class="string">&#x27;用户ID,主键自增&#x27;</span>,</span><br><span class="line">    user_name 	<span class="type">VARCHAR</span>(<span class="number">100</span>) 	<span class="keyword">NOT</span> <span class="keyword">NULL</span> 			COMMENT <span class="string">&#x27;用户名称&#x27;</span>,</span><br><span class="line">    phone 	<span class="type">VARCHAR</span>(<span class="number">50</span>) 	<span class="keyword">UNIQUE</span> 		<span class="keyword">NOT</span> <span class="keyword">NULL</span> 	COMMENT <span class="string">&#x27;手机号&#x27;</span>,</span><br><span class="line">    password 	<span class="type">VARCHAR</span>(<span class="number">255</span>) 	 		<span class="keyword">NOT</span> <span class="keyword">NULL</span> 	COMMENT <span class="string">&#x27;手机号&#x27;</span>,</span><br><span class="line">    nick_name 	<span class="type">VARCHAR</span>(<span class="number">100</span>) 					COMMENT <span class="string">&#x27;昵称&#x27;</span>,</span><br><span class="line">    avatar 	<span class="type">VARCHAR</span>(<span class="number">521</span>) 					COMMENT <span class="string">&#x27;头像地址&#x27;</span>,</span><br><span class="line">    status 	<span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span> 					COMMENT <span class="string">&#x27;部门状态 1: 可用 0:禁用&#x27;</span>,</span><br><span class="line">    is_delete 	<span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> 					COMMENT <span class="string">&#x27;是否删除 1:删除 0:未删除&#x27;</span>,</span><br><span class="line">    dept_id     <span class="type">INT</span> 						COMMENT <span class="string">&#x27;部门ID,关联部门表sys_department主键&#x27;</span>,</span><br><span class="line">    create_time DATETIME 					COMMENT <span class="string">&#x27;数据创建时间&#x27;</span>,</span><br><span class="line">    update_time <span class="type">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span></span><br><span class="line">)<span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span><span class="string">&#x27;UTF8&#x27;</span> AUTO_INCREMENT<span class="operator">=</span><span class="number">10000</span> COMMENT<span class="operator">=</span><span class="string">&#x27;用户表&#x27;</span>;</span><br><span class="line"><span class="comment">-- 角色表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> sys_role(</span><br><span class="line">    role_id         <span class="type">INT</span>             <span class="keyword">PRIMARY</span> KEY     AUTO_INCREMENT      COMMENT <span class="string">&#x27;角色ID,主键自增&#x27;</span>,</span><br><span class="line">    role_name       <span class="type">VARCHAR</span>(<span class="number">100</span>)    <span class="keyword">NOT</span> <span class="keyword">NULL</span>                            COMMENT <span class="string">&#x27;角色名称&#x27;</span>,</span><br><span class="line">    status          <span class="type">INT</span>             <span class="keyword">DEFAULT</span> <span class="number">1</span>                           COMMENT <span class="string">&#x27;部门状态 1: 可用 0:禁用&#x27;</span>,</span><br><span class="line">    is_delete       <span class="type">INT</span>             <span class="keyword">DEFAULT</span> <span class="number">0</span>                           COMMENT <span class="string">&#x27;是否删除 1:删除 0:未删除&#x27;</span>,</span><br><span class="line">    create_time     DATETIME                                            COMMENT <span class="string">&#x27;数据创建时间&#x27;</span>,</span><br><span class="line">    update_time     <span class="type">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span></span><br><span class="line">)<span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span><span class="string">&#x27;UTF8&#x27;</span> AUTO_INCREMENT<span class="operator">=</span><span class="number">10000</span> COMMENT<span class="operator">=</span><span class="string">&#x27;角色表&#x27;</span>;</span><br><span class="line"><span class="comment">-- 权限表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> sys_permission(</span><br><span class="line">    permission_id   <span class="type">INT</span>             <span class="keyword">PRIMARY</span> KEY     AUTO_INCREMENT      COMMENT <span class="string">&#x27;权限ID,主键自增&#x27;</span>,</span><br><span class="line">    permission_name <span class="type">VARCHAR</span>(<span class="number">100</span>)    <span class="keyword">NOT</span> <span class="keyword">NULL</span>                            COMMENT <span class="string">&#x27;权限名称&#x27;</span>,</span><br><span class="line">    status          <span class="type">INT</span>             <span class="keyword">DEFAULT</span> <span class="number">1</span>                           COMMENT <span class="string">&#x27;部门状态 1: 可用 0:禁用&#x27;</span>,</span><br><span class="line">    is_delete       <span class="type">INT</span>             <span class="keyword">DEFAULT</span> <span class="number">0</span>                           COMMENT <span class="string">&#x27;是否删除 1:删除 0:未删除&#x27;</span>,</span><br><span class="line">    create_time     DATETIME                                            COMMENT <span class="string">&#x27;数据创建时间&#x27;</span>,</span><br><span class="line">    update_time     <span class="type">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span></span><br><span class="line">)<span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span><span class="string">&#x27;UTF8&#x27;</span> AUTO_INCREMENT<span class="operator">=</span><span class="number">10000</span> COMMENT<span class="operator">=</span><span class="string">&#x27;权限表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用户角色关联表 n-n</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> sys_user_role(</span><br><span class="line">    user_id <span class="type">INT</span> COMMENT <span class="string">&#x27;用户ID,关联用户表sys_user主键&#x27;</span>,</span><br><span class="line">    role_id <span class="type">INT</span> COMMENT <span class="string">&#x27;角色ID,关联角色表sys_role主键&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (user_id,role_id)</span><br><span class="line">)<span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span><span class="string">&#x27;UTF8&#x27;</span> COMMENT<span class="operator">=</span><span class="string">&#x27;用户角色关联表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 角色权限关联表 n-n</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> sys_role_permission(</span><br><span class="line">    role_id         <span class="type">INT</span> COMMENT <span class="string">&#x27;角色ID,关联角色表sys_role主键&#x27;</span>,</span><br><span class="line">    permission_id   <span class="type">INT</span> COMMENT <span class="string">&#x27;权限ID,关联权限表sys_permission主键&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (role_id,permission_id)</span><br><span class="line">)<span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span><span class="string">&#x27;UTF8&#x27;</span> COMMENT<span class="operator">=</span><span class="string">&#x27;用户角色关联表&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="第3节-基础类设计"><a href="#第3节-基础类设计" class="headerlink" title="第3节 基础类设计"></a>第3节 基础类设计</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 状态管理枚举</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Schema(description = &quot;YueAn状态管理枚举类&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">YueAnEnum</span> &#123;</span><br><span class="line">    SUCCESS(<span class="number">200</span>,<span class="string">&quot;成功&quot;</span>),</span><br><span class="line">    PARAMS_NOT_NULL(<span class="number">201</span>,<span class="string">&quot;请求参数不能为空&quot;</span>),</span><br><span class="line">    FILE_CONTENT_NOT_NULL(<span class="number">202</span>,<span class="string">&quot;文件内容不能为空&quot;</span>),</span><br><span class="line">    FILE_FORMAT_ILLEGAL(<span class="number">203</span>,<span class="string">&quot;文件格式不合法&quot;</span>),</span><br><span class="line">    AUTHORIZATION_FAILURE(<span class="number">204</span>,<span class="string">&quot;登陆失败,用户名或密码错误&quot;</span>),</span><br><span class="line">    AUTHENTICATION_FORBIDDEN(<span class="number">205</span>,<span class="string">&quot;权限不足&quot;</span>),</span><br><span class="line">    ACCOUNT_NULL(<span class="number">206</span>,<span class="string">&quot;账户不存在&quot;</span>),</span><br><span class="line">    TOKEN_NULL(<span class="number">207</span>,<span class="string">&quot;token为空&quot;</span>),</span><br><span class="line">    CAPTCHA_FAILURE(<span class="number">208</span>,<span class="string">&quot;验证码生成失败&quot;</span>),</span><br><span class="line">    CAPTCHA_ERROR(<span class="number">209</span>,<span class="string">&quot;验证码输入错误&quot;</span>),</span><br><span class="line">    TOKEN_TIMEOUT(<span class="number">211</span>,<span class="string">&quot;token过期或未登陆,请重新登陆&quot;</span>),</span><br><span class="line">    PARAMS_FORMAT_ERROR(<span class="number">212</span>,<span class="string">&quot;请求参数格式错误&quot;</span>),</span><br><span class="line">	<span class="comment">// TODO ...</span></span><br><span class="line"></span><br><span class="line">    ERROR(-<span class="number">1</span>,<span class="string">&quot;系统异常,请联系管理员&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    YueAnEnum(<span class="type">int</span> code, String msg) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(<span class="type">int</span> code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMsg</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统一返回数据封装类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Schema(description = &quot;统一返回数据封装类&quot;,name = &quot;Result&lt;T&gt;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应状态码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;响应状态码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">code</span> <span class="operator">=</span> YueAnEnum.SUCCESS.getCode();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;响应提示消息&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> YueAnEnum.SUCCESS.getMsg();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应结果数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;返回数据&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务器响应时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;服务器响应时间&quot;)</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">LocalDateTime</span> <span class="variable">timestamp</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">(<span class="type">int</span> code, String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">(YueAnEnum yueAnEnum)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = yueAnEnum.getCode();</span><br><span class="line">        <span class="built_in">this</span>.msg = yueAnEnum.getMsg();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">(YueAnEnum yueAnEnum, T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = yueAnEnum.getCode();</span><br><span class="line">        <span class="built_in">this</span>.msg = yueAnEnum.getMsg();</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功 - 无返回数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">success</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功 - 有返回数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">success</span><span class="params">(T t)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 失败 - 无返回数据 - 设置异常消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">error</span><span class="params">(YueAnEnum yueAnEnum)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(yueAnEnum.getCode(),yueAnEnum.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 失败 - 无返回数据 - 设置异常消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">error</span><span class="params">(<span class="type">int</span> code,String msg)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(code,msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 失败 - 有返回数据 - 设置异常消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">error</span><span class="params">(YueAnEnum yueAnEnum,T t)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(yueAnEnum,t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第4节-统一异常处理"><a href="#第4节-统一异常处理" class="headerlink" title="第4节 统一异常处理"></a>第4节 统一异常处理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统一异常处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YueAnExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LoggerFactory.getLogger(YueAnExceptionHandler.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通用统一异常处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e  异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>   返回异常信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = &#123;YueAnException.class, AccessDeniedException.class,Exception.class&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">commonException</span><span class="params">(Exception e)</span>&#123;</span><br><span class="line">        LOGGER.error(<span class="string">&quot;全局异常: YueAnExceptionHandler#commonException&quot;</span>,e);</span><br><span class="line">        <span class="keyword">if</span>(e <span class="keyword">instanceof</span> YueAnException)&#123;</span><br><span class="line">            <span class="type">YueAnException</span> <span class="variable">yueAnException</span> <span class="operator">=</span> (YueAnException) e;</span><br><span class="line">            <span class="keyword">return</span> Result.error(yueAnException.getCode(),yueAnException.getMessage());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> AccessDeniedException) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.error(YueAnEnum.AUTHENTICATION_FORBIDDEN);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.error(YueAnEnum.ERROR.getCode(),StringUtils.isNotEmpty(e.getMessage())?e.getMessage():YueAnEnum.ERROR.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求参数数据格式转换异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = &#123;HttpMessageNotReadableException.class&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">parseHttpMessageNotReadableException</span><span class="params">(Exception e)</span>&#123;</span><br><span class="line">        LOGGER.error(<span class="string">&quot;全局异常: YueAnExceptionHandler#parseHttpMessageNotReadableException&quot;</span>,e);</span><br><span class="line">        <span class="keyword">return</span> Result.error(YueAnEnum.PARAMS_FORMAT_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第5节-统一日志处理"><a href="#第5节-统一日志处理" class="headerlink" title="第5节 统一日志处理"></a>第5节 统一日志处理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统一日志处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(value = 2)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日志对象声明</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LoggerFactory.getLogger(LogAspect.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统一切入点表达式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut(value = &quot;execution(* io.yue.controller.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日志环绕通知</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint  切入点表达式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  返回值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around(value = &quot;log()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">logAround</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">ServletRequestAttributes</span> <span class="variable">attributes</span> <span class="operator">=</span> (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> attributes.getRequest();</span><br><span class="line">        <span class="comment">//获取主机IP</span></span><br><span class="line">        LOGGER.info(<span class="string">&quot;IP地址 :&#123;&#125;&quot;</span>,request.getRemoteAddr());</span><br><span class="line">        <span class="comment">//国家省市区地址详情  中国|0|黑龙江省|哈尔滨市|教育网</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">IPInfo</span> <span class="variable">ipInfo</span> <span class="operator">=</span> IPInfoUtils.getIpInfo(request.getRemoteAddr());</span><br><span class="line">            LOGGER.info(<span class="string">&quot;IP地址详情 :&#123;&#125;-&#123;&#125;-&#123;&#125;-&#123;&#125;&quot;</span>,ipInfo.getCountry(),ipInfo.getProvince(),ipInfo.getAddress(),ipInfo.getIsp());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            LOGGER.error(<span class="string">&quot;IP地址解析失败:&quot;</span>,e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取请求地址</span></span><br><span class="line">        LOGGER.info(<span class="string">&quot;请求URL :&#123;&#125;&quot;</span>,request.getRequestURL().toString());</span><br><span class="line">        <span class="comment">//获取请求方式</span></span><br><span class="line">        LOGGER.info(<span class="string">&quot;HTTP 请求方式 :&#123;&#125;&quot;</span>,request.getMethod());</span><br><span class="line">        <span class="comment">//获取类名和方法名</span></span><br><span class="line">        LOGGER.info(<span class="string">&quot;类方法 :&#123;&#125;.&#123;&#125;&quot;</span>,joinPoint.getSignature().getDeclaringTypeName(),joinPoint.getSignature().getName());</span><br><span class="line">        <span class="comment">//方法入参</span></span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        <span class="keyword">if</span>(ArrayUtils.isNotEmpty(args))&#123;</span><br><span class="line">            LOGGER.info(<span class="string">&quot;方法入参 :&#123;&#125;&quot;</span>, Arrays.asList(args));</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            LOGGER.info(<span class="string">&quot;方法入参 :&#123;&#125;&quot;</span>, <span class="string">&quot;参数为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line">        LOGGER.info(<span class="string">&quot;返回结果 :&#123;&#125;&quot;</span>,proceed);</span><br><span class="line">        LOGGER.info(<span class="string">&quot;-------------------------------------------------------&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第6节-日志链路追踪"><a href="#第6节-日志链路追踪" class="headerlink" title="第6节 日志链路追踪"></a>第6节 日志链路追踪</h3><h4 id="6-1-给日志添加唯一ID"><a href="#6-1-给日志添加唯一ID" class="headerlink" title="6.1 给日志添加唯一ID"></a>6.1 给日志添加唯一ID</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 日志链路追踪配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(value = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MDCAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TRACE_ID_KEY</span> <span class="operator">=</span> <span class="string">&quot;traceId&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(value = &quot;execution(* io.yue.controller.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">mdc</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;mdc()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mdcPre</span><span class="params">()</span>&#123;</span><br><span class="line">        MDC.put(TRACE_ID_KEY, UUID.randomUUID().toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;mdc()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mdReturn</span><span class="params">()</span>&#123;</span><br><span class="line">        MDC.remove(TRACE_ID_KEY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;mdc()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mdcException</span><span class="params">()</span>&#123;</span><br><span class="line">        MDC.remove(TRACE_ID_KEY);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-2-日志文件配置唯一ID"><a href="#6-2-日志文件配置唯一ID" class="headerlink" title="6.2 日志文件配置唯一ID"></a>6.2 日志文件配置唯一ID</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- logback-spring.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        日志存放路径</span></span><br><span class="line"><span class="comment">        $&#123;user.home&#125;: 在不同的操作系统上动态获取用户家目录</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;log.path&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;user.home&#125;/yue/log&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 控制台输出配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125;-[%X&#123;traceId&#125;]- %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文件输出配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 时时日志的名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/yue-an.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 最终生成日志文件的名称,以天作为基本单元 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/yue-an.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 存储60天历史记录 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>60<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125;-[%X&#123;traceId&#125;]- %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="第7节-IP地址定位"><a href="#第7节-IP地址定位" class="headerlink" title="第7节 IP地址定位"></a>第7节 IP地址定位</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 离线地理信息定位,在第四章第5节日志中添加 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jthinking.common<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ip-info<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="第8节-静态资源管理"><a href="#第8节-静态资源管理" class="headerlink" title="第8节 静态资源管理"></a>第8节 静态资源管理</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">yue:</span></span><br><span class="line">  <span class="attr">file-dir:</span> <span class="string">D:/yue/</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">static-locations:</span> <span class="string">classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/,file:$&#123;yue.file-dir&#125;/</span> <span class="comment"># 配置静态资源位置,通过服务器地址可以访问此目录下的资源</span></span><br></pre></td></tr></table></figure>

<h3 id="第9节-Knife4j在线API"><a href="#第9节-Knife4j在线API" class="headerlink" title="第9节 Knife4j在线API"></a>第9节 Knife4j在线API</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Knife4j配置 在线API文档和工具(Swagger)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Knife4jConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Knife4j基础信息配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> OpenAPI <span class="title function_">openAPI</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OpenAPI</span>()</span><br><span class="line">                .info(<span class="keyword">new</span> <span class="title class_">Info</span>()</span><br><span class="line">                        .title(<span class="string">&quot;Yue-An 在线API文档&quot;</span>)</span><br><span class="line">                        .version(<span class="string">&quot;v1.0.0&quot;</span>)</span><br><span class="line">                        .contact(<span class="keyword">new</span> <span class="title class_">Contact</span>()</span><br><span class="line">                                .name(<span class="string">&quot;Yue-An&quot;</span>)</span><br><span class="line">                                .email(<span class="string">&quot;hd1611756908@163.com&quot;</span>)</span><br><span class="line">                                .url(<span class="string">&quot;https://hs-an-yue.github.io&quot;</span>))</span><br><span class="line">                        .description(<span class="string">&quot;Yue-An是一个可定制化的快速成站的单点框架&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第五章-其它配置"><a href="#第五章-其它配置" class="headerlink" title="第五章 其它配置"></a>第五章 其它配置</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 自定义日志图案打印(banner图)</span><br><span class="line"><span class="bullet">2.</span> 项目基础信息打印</span><br></pre></td></tr></table></figure>

<h2 id="第六章-Spring-Security整合"><a href="#第六章-Spring-Security整合" class="headerlink" title="第六章 Spring Security整合"></a>第六章 Spring Security整合</h2><img src="https://note.youdao.com/yws/api/personal/file/WEB917f28d280f1c2f21886fede12541454?method=download&shareKey=35ad5011603941c58b0e99c53669f977">

<h3 id="第1节-Spring-Security-介绍"><a href="#第1节-Spring-Security-介绍" class="headerlink" title="第1节 Spring Security 介绍"></a>第1节 Spring Security 介绍</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">保护我们的JavaWeb网站</span><br></pre></td></tr></table></figure>

<h3 id="第2节-Spring-Security-API介绍"><a href="#第2节-Spring-Security-API介绍" class="headerlink" title="第2节 Spring Security API介绍"></a>第2节 Spring Security API介绍</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">1</span>. 创建封装数据传递的类				UserDetails</span><br><span class="line"><span class="attribute">2</span>. 从数据库获取数据,送到Spring Security上下文	UserDetailsService</span><br><span class="line"><span class="attribute">3</span>. Spring Security核心配置</span><br><span class="line">	<span class="attribute">3</span>.<span class="number">1</span> 核心过滤器 SecurityFilterChain</span><br><span class="line">	<span class="attribute">3</span>.<span class="number">2</span> 密码加密  PasswordEncoder</span><br><span class="line">	<span class="attribute">3</span>.<span class="number">3</span> 认证管理器</span><br><span class="line">		<span class="attribute">3</span>.<span class="number">3</span>.<span class="number">1</span> AuthenticationManager</span><br><span class="line">		<span class="attribute">3</span>.<span class="number">3</span>.<span class="number">2</span> AuthenticationConfiguration</span><br><span class="line"><span class="attribute">4</span>. 登录实现 UsernamePasswordAuthenticationToken</span><br><span class="line"><span class="attribute">5</span>. 登录失败配置                  		AuthenticationEntryPoint</span><br><span class="line"><span class="attribute">6</span>. 注销成功配置					LogoutSuccessHandler</span><br><span class="line"><span class="attribute">7</span>. 前后端分离统一令牌校验和处理     		OncePerRequestFilter</span><br></pre></td></tr></table></figure>

<h3 id="第3节-Spring-Security整合"><a href="#第3节-Spring-Security整合" class="headerlink" title="第3节 Spring Security整合"></a>第3节 Spring Security整合</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">实现 略</span><br></pre></td></tr></table></figure>

<h2 id="第七章-基础架构总结"><a href="#第七章-基础架构总结" class="headerlink" title="第七章 基础架构总结"></a>第七章 基础架构总结</h2><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 当前架构虽为单点架构,但是采用前后端分离的方式,具备可扩展性,可以部署成集群方式</span><br><span class="line"><span class="number">2</span>. 当前架构添加了在线API文档,链路日志追踪等功能可以很好的为后期业务提供支持</span><br><span class="line">	<span class="number">2.1</span> 在线API文档 : 快速的文档响应速度，以及在线<span class="type">API</span>工具的测试</span><br><span class="line">	<span class="number">2.2</span> 链路日志追踪 : 定位错误消息时更方便</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>架构</category>
      </categories>
      <tags>
        <tag>权限</tag>
        <tag>架构</tag>
        <tag>JavaWeb</tag>
        <tag>日志</tag>
        <tag>异常</tag>
        <tag>链路追踪</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7服务器安装Ollama服务器</title>
    <url>/2025/04/25/ai/Centos7%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85Ollama/</url>
    <content><![CDATA[<figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line"><span class="attribute">作者</span><span class="punctuation">:</span> <span class="string">夜泊1990</span></span><br><span class="line"><span class="attribute">企鹅</span><span class="punctuation">:</span> <span class="string">1611756908</span></span><br><span class="line"><span class="attribute">Q 群</span><span class="punctuation">:</span> <span class="string">948233848</span></span><br><span class="line"><span class="attribute">邮箱</span><span class="punctuation">:</span> <span class="string">hd1611756908@163.com</span></span><br><span class="line"><span class="attribute">博客</span><span class="punctuation">:</span> <span class="string">https://hs-an-yue.github.io/</span></span><br><span class="line"><span class="attribute">B 站</span><span class="punctuation">:</span> <span class="string">https://space.bilibili.com/514155929/</span></span><br></pre></td></tr></table></figure>

<hr>
<span id="more"></span>

<h2 id="第一章-Ollama简介"><a href="#第一章-Ollama简介" class="headerlink" title="第一章 Ollama简介"></a>第一章 Ollama简介</h2><h3 id="第1节-Ollama官网"><a href="#第1节-Ollama官网" class="headerlink" title="第1节 Ollama官网"></a>第1节 Ollama官网</h3><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">官网<span class="punctuation">:</span> https<span class="punctuation">:</span><span class="comment">//ollama.com/</span></span><br></pre></td></tr></table></figure>

<h3 id="第2节-Ollama介绍"><a href="#第2节-Ollama介绍" class="headerlink" title="第2节 Ollama介绍"></a>第2节 Ollama介绍</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">一句话介绍Ollama: 启动并运行大型语言模型的工具,提供了丰富的大语言模型(但不是所有模型都支持),提供了简单的对外API调用。</span><br></pre></td></tr></table></figure>

<h2 id="第二章-Ollama-安装前的环境需求"><a href="#第二章-Ollama-安装前的环境需求" class="headerlink" title="第二章 Ollama 安装前的环境需求"></a>第二章 Ollama 安装前的环境需求</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">本次测试采用虚拟机下安装的Centos7系统,虚拟机采用 VMware® Workstation 17 Pro</span><br><span class="line"></span><br><span class="line">1. 将操作系统内核升级到最新版本 命令为: sudo yum update</span><br><span class="line">2. 更新软件系统包 命令为: sudo yum check-update</span><br><span class="line">3. Python需要升级到 Python3以上版本,可以根据自己喜欢的方式进行升级.我的升级方式如下:</span><br><span class="line">    sudo yum install epel-release</span><br><span class="line">    sudo yum install python3</span><br><span class="line">    sudo yum install python3-devel</span><br><span class="line">    sudo yum install python3-pip</span><br><span class="line">    //查看版本  python3 --version</span><br><span class="line"></span><br><span class="line">以上就是安装Ollama前的环境准备</span><br></pre></td></tr></table></figure>

<h2 id="第三章-Ollama安装和测试"><a href="#第三章-Ollama安装和测试" class="headerlink" title="第三章 Ollama安装和测试"></a>第三章 Ollama安装和测试</h2><h3 id="第1节-安装Ollama-Centos7"><a href="#第1节-安装Ollama-Centos7" class="headerlink" title="第1节 安装Ollama(Centos7)"></a>第1节 安装Ollama(Centos7)</h3><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">Linux安装非常简单一条命令即可,命令为: curl -fsSL https://ollama.<span class="keyword">com</span>/install.<span class="keyword">sh</span> | <span class="keyword">sh</span></span><br><span class="line"></span><br><span class="line">注意: </span><br><span class="line">	<span class="number">1</span>. 有的用户非常慢,有的用户非常快。和网络有很大关系。</span><br><span class="line">	<span class="number">2</span>. 将本机的代理或者加速器关掉,否则有可能会被官网认为是一个不安全的机器，不让你安装。</span><br></pre></td></tr></table></figure>

<h3 id="第2节-Ollama的常用命令"><a href="#第2节-Ollama的常用命令" class="headerlink" title="第2节 Ollama的常用命令"></a>第2节 Ollama的常用命令</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Ollama安装完成后，可以使用命令行进行操作,使用命令行需要学习一些命令,Ollama的命令不是很多，可以在命令行通过 ollama --help 命令查看ollama支持的命令</span><br><span class="line"></span><br><span class="line">1. 查看当前Ollama正在运行的模型     ollama ps</span><br><span class="line"></span><br><span class="line">    [root@localhost ~]# ollama ps</span><br><span class="line">    NAME           ID              SIZE      PROCESSOR    UNTIL              </span><br><span class="line">    llama3.2:3b    a80c4f17acd5    3.6 GB    100% CPU     4 minutes from now</span><br><span class="line">    </span><br><span class="line">2. 查看当前Ollama工具下有哪些模型   ollama list</span><br><span class="line"></span><br><span class="line">    [root@localhost ~]# ollama list</span><br><span class="line">    NAME           ID              SIZE      MODIFIED    </span><br><span class="line">    llama3.2:3b    a80c4f17acd5    2.0 GB    3 hours ago</span><br><span class="line"></span><br><span class="line">3. 从云端下载模型 </span><br><span class="line">	3.1 官网提供了 Ollama 支持的模型有哪些，地址为: https://ollama.com/library</span><br><span class="line">	3.2 通过官网选择你想要下载并运行的模型可以直接通过命令。例如下载并运行llama3.2模型。 命令为: ollama run llama3.2</span><br><span class="line"></span><br><span class="line">4. 推出模型的交互模式。 快捷键为: ctrl+d   并不会将大模型停止,只是从模型交互模式推出,模型还在运行。</span><br><span class="line">5. 停止Ollama中的某一个模型，命令为:ollama stop 模型名称,例如: ollama stop llama3.2:3b 停止llama3.2:3b在Ollama中的运行</span><br><span class="line">6. 删除Ollama中的模型</span><br><span class="line">	6.1 将模型停止 ollama stop llama3.2:3b</span><br><span class="line">	6.2 使用命令删除 ollama rm llama3.2:3b</span><br><span class="line"></span><br><span class="line">其他命令不是很常见,这里不做介绍.</span><br></pre></td></tr></table></figure>

<h3 id="第3节-本地访问Ollama模型"><a href="#第3节-本地访问Ollama模型" class="headerlink" title="第3节 本地访问Ollama模型"></a>第3节 本地访问Ollama模型</h3><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">第一种方式就是命令行交互方式,在使用ollama run 命令时直接进入交互模式，可以直接在命令行和大模型进行对话.</span><br><span class="line"></span><br><span class="line">第二种方式直接在浏览器中访问Ollama服务器地址,测试Ollama服务是否正确运行（不是调用模型），只是测试Ollama是否安装和运行正常</span><br><span class="line">Ollama服务器启动后默认占用 <span class="number">11434</span> 端口号,所以在浏览器中 通过IP+端口号访问 http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">11434</span></span><br><span class="line">在浏览器中看见此提示说明Ollama运行正常 Ollama <span class="keyword">is</span> running</span><br><span class="line"></span><br><span class="line">第三种方式还是在命令行中采用命令的方式进行交互，这种交互方式是调用Ollama的API的方式，示例如下:</span><br><span class="line">通过此命令在CMD命令行访问Ollama服务器</span><br><span class="line">curl http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">11434</span>/api/generate -d <span class="string">&quot;&#123;\&quot;</span>model\<span class="string">&quot;: \&quot;</span>qwen2.<span class="number">5</span>:<span class="number">0.5</span>b\<span class="string">&quot;,\&quot;</span>prompt\<span class="string">&quot;: \&quot;</span>你是谁?\<span class="string">&quot;,\&quot;</span>stream\<span class="string">&quot;:false&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">注意: Ollama服务器默认不开放IP地址给其他服务器,也就是说只能在同一台机器上访问，只可以使用<span class="number">127.0</span>.<span class="number">0.1</span>或者localhost访问,后面在配置被任意其它主机访问</span><br></pre></td></tr></table></figure>

<h2 id="第四章-设置任意IP地址访问Ollama服务"><a href="#第四章-设置任意IP地址访问Ollama服务" class="headerlink" title="第四章 设置任意IP地址访问Ollama服务"></a>第四章 设置任意IP地址访问Ollama服务</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">配置任意IP访问的配置文件的位置  /etc/systemd/system/ollama.service</span><br><span class="line"></span><br><span class="line">ollama.service在此文件的[Service]下，设置 Environment=<span class="string">&quot;OLLAMA_HOST=0.0.0.0&quot;</span> 即可</span><br><span class="line"></span><br><span class="line">设置后我的文件内容如下: 每个人的文件内容可能不相同,我的样例</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=Ollama Service</span><br><span class="line">After=network-online.<span class="keyword">target</span></span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/local/bin/ollama serve</span><br><span class="line">User=ollama</span><br><span class="line">Group=ollama</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=<span class="number">3</span></span><br><span class="line">Environment=<span class="string">&quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;OLLAMA_HOST=0.0.0.0&quot;</span>     <span class="comment"># 这是我加的</span></span><br><span class="line"></span><br><span class="line">[<span class="keyword">Install</span>]</span><br><span class="line">WantedBy=default.<span class="keyword">target</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">添加完后保存，然后执行以下命令刷新配置:</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload         重新生成依赖关系</span><br><span class="line">systemctl restart ollama        重启Ollama</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">重新启动完Ollama后，可以使用命令，重新调用Ollama中的大模型，测试是否配置成功，样式如下 ↓↓↓↓↓↓↓↓ </span><br><span class="line">注意: 如果用Windows命令行测试的话不能使用Windows PowerShell命令行，要使用windows原生命令行工具。</span><br><span class="line">我这里测试使用的模型是阿里千问(qwen2.<span class="number">5</span>:<span class="number">0.5</span>b)的模型进行的测试（注意: 要先运行模型）</span><br></pre></td></tr></table></figure>

<img src="https://note.youdao.com/yws/api/personal/file/WEB888bef7a3c78b7128bd69d011f8dd540?method=download&shareKey=dff01709ea95dc8908a0b3736e200178">

<hr>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">在应用中，大语言模型是不能直接用的，可能会出现很严重的安全问题</span><br><span class="line">1. 没人可以保证大语言模型在进行训练的时候，训练的数据都是正确的，比如有人论文造假，大语言模型学了造假的论文，那他就被训练成一个骗子。</span><br><span class="line">2. 训练好了的大模型，在进行泛化的时候基本也不是很准确，因为你问的问题，可能在大语言模型的训练数据中没有完全准确的答案，大语言模型需要自己去推理，那他的推理就千奇百怪了，可能驴唇不对马嘴</span><br><span class="line">3. 所以要想把大语言模型用于日常应用还需要很多的辅助技术，这里不做赘述，后期有时间在说。</span><br><span class="line"></span><br><span class="line">下面是 裸的大语言模型已读乱回的情况，这种问题还是有具体固定答案的，他都不能百分百回答正确，如果是没有固定答案，需要模型推理的呢?所以解决不了大语言模型的安全问题，真正大面积应用还需要等待。</span><br></pre></td></tr></table></figure>

<img src="https://note.youdao.com/yws/api/personal/file/WEB63f87e72f3a90d14ab7ac8a03e0d326a?method=download&shareKey=f6adea59e76be28f45c8e6dc28c50879">

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">典型的已读乱回.这种现象是有办法调试的，后面有时间在继续说大模型的生态。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Ollama 极简环境搭建和测试完成…</p>
</blockquote>
]]></content>
      <categories>
        <category>AI</category>
      </categories>
      <tags>
        <tag>Centos</tag>
        <tag>AI</tag>
        <tag>ollama</tag>
      </tags>
  </entry>
  <entry>
    <title>Java成功之路</title>
    <url>/2025/04/27/java/00/Java%E6%88%90%E5%8A%9F%E4%B9%8B%E8%B7%AF/</url>
    <content><![CDATA[<figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line"><span class="attribute">作者</span><span class="punctuation">:</span> <span class="string">夜泊1990</span></span><br><span class="line"><span class="attribute">企鹅</span><span class="punctuation">:</span> <span class="string">1611756908</span></span><br><span class="line"><span class="attribute">Q 群</span><span class="punctuation">:</span> <span class="string">948233848</span></span><br><span class="line"><span class="attribute">邮箱</span><span class="punctuation">:</span> <span class="string">hd1611756908@163.com</span></span><br><span class="line"><span class="attribute">博客</span><span class="punctuation">:</span> <span class="string">https://hs-an-yue.github.io/</span></span><br><span class="line"><span class="attribute">B 站</span><span class="punctuation">:</span> <span class="string">https://space.bilibili.com/514155929/</span></span><br></pre></td></tr></table></figure>

<hr>
<span id="more"></span>

<p><img src="https://note.youdao.com/yws/api/personal/file/WEBc9c042367fbbe78ee7a17abd2db08757?method=download&shareKey=ac937d18e8aac7807f997e958c70a40d"></p>
<blockquote>
<p>根据此路线大纲开始进入Java成神之路…</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>计算机</tag>
      </tags>
  </entry>
</search>
